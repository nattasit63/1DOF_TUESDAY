
ty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a09c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a238  0800a238  0001a238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a8  0800a2a8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a2b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000098  0800a348  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800a348  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cbb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f21  00000000  00000000  00031d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00034c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001669e  00000000  00000000  00035b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b5d  00000000  00000000  0004c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090522  00000000  00000000  0005dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004788  00000000  00000000  000ee2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a21c 	.word	0x0800a21c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	0800a21c 	.word	0x0800a21c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	0000      	movs	r0, r0
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f002 f962 	bl	8003334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f90c 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fb48 	bl	8001708 <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 fb1e 	bl	80016b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800107c:	f000 faf2 	bl	8001664 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001080:	f000 f96c 	bl	800135c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001084:	f000 f998 	bl	80013b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001088:	f000 fa3a 	bl	8001500 <MX_TIM3_Init>
  MX_TIM2_Init();
 800108c:	f000 f9ec 	bl	8001468 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001090:	f000 fa9a 	bl	80015c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001094:	486c      	ldr	r0, [pc, #432]	; (8001248 <main+0x1e0>)
 8001096:	f006 f9d3 	bl	8007440 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800109a:	486c      	ldr	r0, [pc, #432]	; (800124c <main+0x1e4>)
 800109c:	f006 f976 	bl	800738c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	486a      	ldr	r0, [pc, #424]	; (800124c <main+0x1e4>)
 80010a4:	f006 fa7e 	bl	80075a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010a8:	2104      	movs	r1, #4
 80010aa:	4868      	ldr	r0, [pc, #416]	; (800124c <main+0x1e4>)
 80010ac:	f006 fa7a 	bl	80075a4 <HAL_TIM_PWM_Start>

  PWMOut = 0;
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <main+0x1e8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
  MotorDrive();
 80010b6:	f001 fd55 	bl	8002b64 <MotorDrive>
  HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f002 f9ac 	bl	8003418 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////////////////////
  while (1)
  {


	  if(push==1)
 80010c0:	4b64      	ldr	r3, [pc, #400]	; (8001254 <main+0x1ec>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <main+0x6c>
	  		{
		  push=0;
 80010c8:	4b62      	ldr	r3, [pc, #392]	; (8001254 <main+0x1ec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	  		HAL_TIM_Base_Start_IT(&htim4);
 80010ce:	4862      	ldr	r0, [pc, #392]	; (8001258 <main+0x1f0>)
 80010d0:	f006 f9b6 	bl	8007440 <HAL_TIM_Base_Start_IT>
	  		}



	  if (micros() - Timestamp >= 1000) //1000us = 0.001s = 1kHz
 80010d4:	f001 fcf0 	bl	8002ab8 <micros>
 80010d8:	4b60      	ldr	r3, [pc, #384]	; (800125c <main+0x1f4>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	1a84      	subs	r4, r0, r2
 80010e0:	eb61 0503 	sbc.w	r5, r1, r3
 80010e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	42ab      	cmp	r3, r5
 80010ee:	bf08      	it	eq
 80010f0:	42a2      	cmpeq	r2, r4
 80010f2:	f080 80a1 	bcs.w	8001238 <main+0x1d0>
	  {
		  Timestamp = micros();
 80010f6:	f001 fcdf 	bl	8002ab8 <micros>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4957      	ldr	r1, [pc, #348]	; (800125c <main+0x1f4>)
 8001100:	e9c1 2300 	strd	r2, r3, [r1]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001104:	2120      	movs	r1, #32
 8001106:	4856      	ldr	r0, [pc, #344]	; (8001260 <main+0x1f8>)
 8001108:	f002 fffb 	bl	8004102 <HAL_GPIO_TogglePin>
		  NucleoCheck();
 800110c:	f000 fb78 	bl	8001800 <NucleoCheck>
		  MicroCheck();
 8001110:	f001 fcec 	bl	8002aec <MicroCheck>
		  ProxiCheck();
 8001114:	f001 fd0e 	bl	8002b34 <ProxiCheck>
		  I2C_Check();
 8001118:	f001 fe28 	bl	8002d6c <I2C_Check>


		  RobotArm_Position = EncoderPosition_Update();
 800111c:	f000 fb94 	bl	8001848 <EncoderPosition_Update>
 8001120:	ee07 0a90 	vmov	s15, r0
 8001124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <main+0x1fc>)
 800112a:	edc3 7a00 	vstr	s15, [r3]
		  rb_pos = (float)(RobotArm_Position*360.00/7200.00);
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <main+0x1fc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9b4 	bl	80004a0 <__aeabi_f2d>
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <main+0x200>)
 800113e:	f7ff fa07 	bl	8000550 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	a33d      	add	r3, pc, #244	; (adr r3, 8001240 <main+0x1d8>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fb28 	bl	80007a4 <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fca8 	bl	8000ab0 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4a42      	ldr	r2, [pc, #264]	; (800126c <main+0x204>)
 8001164:	6013      	str	r3, [r2, #0]

		  static Transition_State State = Set_Home;

		  switch(State)
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <main+0x208>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d866      	bhi.n	800123c <main+0x1d4>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <main+0x10c>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001189 	.word	0x08001189
 8001178:	0800123d 	.word	0x0800123d
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011b1 	.word	0x080011b1
 8001184:	0800122d 	.word	0x0800122d
		  {
		  	  case Set_Home:
		  		  PWMOut = 2000;
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <main+0x1e8>)
 800118a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800118e:	601a      	str	r2, [r3, #0]
		  		  MotorDrive();
 8001190:	f001 fce8 	bl	8002b64 <MotorDrive>
		  		  HAL_Delay(2000);
 8001194:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001198:	f002 f93e 	bl	8003418 <HAL_Delay>
		  		  SetHome();
 800119c:	f001 fd06 	bl	8002bac <SetHome>
		  		  State = UART_Commu;
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <main+0x208>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		  		  break;
 80011a6:	e04a      	b.n	800123e <main+0x1d6>
//		  			  State = Traj_Plan;
//		  		  }
		  		  break;

		  	  case Traj_Plan:
		  		  State = Arm_Move;
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <main+0x208>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	701a      	strb	r2, [r3, #0]
		  		  break;
 80011ae:	e046      	b.n	800123e <main+0x1d6>

		  	  case Arm_Move:
		  		  if(Desired_Position == RobotArm_Position)
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <main+0x20c>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <main+0x1fc>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	d12d      	bne.n	8001222 <main+0x1ba>
		  		  {
		  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <main+0x1e4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
		  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10000);
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <main+0x1e4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
		  			  HAL_Delay(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011de:	f002 f91b 	bl	8003418 <HAL_Delay>

		  			  PWMOut = 0;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <main+0x1e8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		  			  MotorDrive();
 80011e8:	f001 fcbc 	bl	8002b64 <MotorDrive>
		  			  HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f002 f912 	bl	8003418 <HAL_Delay>

		  			  RobotArmTrigger = 0;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <main+0x210>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

		  			  Error_Position  	= 0;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <main+0x214>)
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Sum= 0;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <main+0x218>)
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Div= 0;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <main+0x21c>)
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Old= 0;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <main+0x220>)
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

		  			  State = I2C_Endeff;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <main+0x208>)
 800121c:	2204      	movs	r2, #4
 800121e:	701a      	strb	r2, [r3, #0]
		  		  else
		  		  {
		  			  Control();
		  			  MotorDrive();
		  		  }
		  		  break;
 8001220:	e00d      	b.n	800123e <main+0x1d6>
		  			  Control();
 8001222:	f001 fcfd 	bl	8002c20 <Control>
		  			  MotorDrive();
 8001226:	f001 fc9d 	bl	8002b64 <MotorDrive>
		  		  break;
 800122a:	e008      	b.n	800123e <main+0x1d6>

		  	  case I2C_Endeff:
		  		  I2C_Laser();
 800122c:	f001 fd66 	bl	8002cfc <I2C_Laser>
		  		  State = UART_Commu;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <main+0x208>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
		  		  break;
 8001236:	e002      	b.n	800123e <main+0x1d6>
		  	  default:
		  		  break;
			}
	  }
 8001238:	bf00      	nop
 800123a:	e741      	b.n	80010c0 <main+0x58>
		  		  break;
 800123c:	bf00      	nop
	  if(push==1)
 800123e:	e73f      	b.n	80010c0 <main+0x58>
 8001240:	00000000 	.word	0x00000000
 8001244:	40bc2000 	.word	0x40bc2000
 8001248:	20000380 	.word	0x20000380
 800124c:	20000290 	.word	0x20000290
 8001250:	200000d0 	.word	0x200000d0
 8001254:	20000170 	.word	0x20000170
 8001258:	200001f4 	.word	0x200001f4
 800125c:	200000c0 	.word	0x200000c0
 8001260:	40020000 	.word	0x40020000
 8001264:	200000d4 	.word	0x200000d4
 8001268:	40768000 	.word	0x40768000
 800126c:	2000017c 	.word	0x2000017c
 8001270:	20000186 	.word	0x20000186
 8001274:	200000d8 	.word	0x200000d8
 8001278:	200000dc 	.word	0x200000dc
 800127c:	200000e0 	.word	0x200000e0
 8001280:	200000e4 	.word	0x200000e4
 8001284:	200000e8 	.word	0x200000e8
 8001288:	200000ec 	.word	0x200000ec

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f008 f800 	bl	80092a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <SystemClock_Config+0xc8>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <SystemClock_Config+0xc8>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <SystemClock_Config+0xc8>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <SystemClock_Config+0xcc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <SystemClock_Config+0xcc>)
 80012d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <SystemClock_Config+0xcc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fb77 	bl	8006a04 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800131c:	f001 fd36 	bl	8002d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2103      	movs	r1, #3
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fdd9 	bl	8006ef4 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001348:	f001 fd20 	bl	8002d8c <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	; 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <MX_I2C1_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_I2C1_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_I2C1_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C1_Init+0x50>)
 800139a:	f002 fecd 	bl	8004138 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f001 fcf2 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000023c 	.word	0x2000023c
 80013b0:	40005400 	.word	0x40005400
 80013b4:	00061a80 	.word	0x00061a80

080013b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 ff6a 	bl	80092a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <MX_TIM1_Init+0xac>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013e8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_TIM1_Init+0xa8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_TIM1_Init+0xa8>)
 800142c:	f006 f96a 	bl	8007704 <HAL_TIM_Encoder_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001436:	f001 fca9 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_TIM1_Init+0xa8>)
 8001448:	f007 f816 	bl	8008478 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001452:	f001 fc9b 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000338 	.word	0x20000338
 8001464:	40010000 	.word	0x40010000

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM2_Init+0x94>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_TIM2_Init+0x94>)
 800148e:	2263      	movs	r2, #99	; 0x63
 8001490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_TIM2_Init+0x94>)
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_TIM2_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_TIM2_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_TIM2_Init+0x94>)
 80014ae:	f005 ff1d 	bl	80072ec <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014b8:	f001 fc68 	bl	8002d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM2_Init+0x94>)
 80014ca:	f006 fc19 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014d4:	f001 fc5a 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM2_Init+0x94>)
 80014e6:	f006 ffc7 	bl	8008478 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014f0:	f001 fc4c 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000380 	.word	0x20000380

08001500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <MX_TIM3_Init+0xc0>)
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <MX_TIM3_Init+0xc4>)
 8001526:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_TIM3_Init+0xc0>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <MX_TIM3_Init+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_TIM3_Init+0xc0>)
 8001536:	f242 7210 	movw	r2, #10000	; 0x2710
 800153a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM3_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_TIM3_Init+0xc0>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001548:	481d      	ldr	r0, [pc, #116]	; (80015c0 <MX_TIM3_Init+0xc0>)
 800154a:	f005 ffdb 	bl	8007504 <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001554:	f001 fc1a 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4619      	mov	r1, r3
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <MX_TIM3_Init+0xc0>)
 8001568:	f006 ff86 	bl	8008478 <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001572:	f001 fc0b 	bl	8002d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001576:	2360      	movs	r3, #96	; 0x60
 8001578:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM3_Init+0xc0>)
 800158e:	f006 faf5 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001598:	f001 fbf8 	bl	8002d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2204      	movs	r2, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM3_Init+0xc0>)
 80015a4:	f006 faea 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f001 fbed 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM3_Init+0xc0>)
 80015b4:	f001 fd1e 	bl	8002ff4 <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000290 	.word	0x20000290
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM4_Init+0x94>)
 80015e6:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <MX_TIM4_Init+0x98>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM4_Init+0x94>)
 80015ec:	2263      	movs	r2, #99	; 0x63
 80015ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM4_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_TIM4_Init+0x94>)
 80015f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80015fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_TIM4_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM4_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_TIM4_Init+0x94>)
 800160c:	f005 fe6e 	bl	80072ec <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001616:	f001 fbb9 	bl	8002d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_TIM4_Init+0x94>)
 8001628:	f006 fb6a 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001632:	f001 fbab 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_TIM4_Init+0x94>)
 8001644:	f006 ff18 	bl	8008478 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800164e:	f001 fb9d 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001f4 	.word	0x200001f4
 8001660:	40000800 	.word	0x40000800

08001664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART2_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800169c:	f006 ff6e 	bl	800857c <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f001 fb71 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003c8 	.word	0x200003c8
 80016b4:	40004400 	.word	0x40004400

080016b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_DMA_Init+0x4c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <MX_DMA_Init+0x4c>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_DMA_Init+0x4c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2010      	movs	r0, #16
 80016e0:	f001 ff99 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016e4:	2010      	movs	r0, #16
 80016e6:	f001 ffb2 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2011      	movs	r0, #17
 80016f0:	f001 ff91 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f4:	2011      	movs	r0, #17
 80016f6:	f001 ffaa 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a2b      	ldr	r2, [pc, #172]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2120      	movs	r1, #32
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_GPIO_Init+0xec>)
 8001794:	f002 fc9c 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_GPIO_Init+0xf0>)
 80017b0:	f002 faf2 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017b4:	2320      	movs	r3, #32
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <MX_GPIO_Init+0xec>)
 80017cc:	f002 fae4 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017d0:	2330      	movs	r3, #48	; 0x30
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <MX_GPIO_Init+0xf4>)
 80017e4:	f002 fad8 	bl	8003d98 <HAL_GPIO_Init>

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020400 	.word	0x40020400

08001800 <NucleoCheck>:

/* USER CODE BEGIN 4 */
//********************************************************************************

void NucleoCheck()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

	ButtonArray[1] = ButtonArray[0];
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <NucleoCheck+0x3c>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <NucleoCheck+0x3c>)
 800180a:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800180c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <NucleoCheck+0x40>)
 8001812:	f002 fc45 	bl	80040a0 <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <NucleoCheck+0x3c>)
 800181c:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <NucleoCheck+0x3c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <NucleoCheck+0x36>
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <NucleoCheck+0x3c>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800182e:	2120      	movs	r1, #32
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <NucleoCheck+0x44>)
 8001832:	f002 fc66 	bl	8004102 <HAL_GPIO_TogglePin>
	}
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	40020800 	.word	0x40020800
 8001844:	40020000 	.word	0x40020000

08001848 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <EncoderPosition_Update+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000338 	.word	0x20000338

08001860 <EncoderVelocity_Update>:
float EncoderVelocity_Update()
{   static uint32_t EncoderLastPosition = 0;
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	ed2d 8b02 	vpush	{d8}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <EncoderVelocity_Update+0x128>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001872:	f001 f921 	bl	8002ab8 <micros>
 8001876:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800187a:	4b44      	ldr	r3, [pc, #272]	; (800198c <EncoderVelocity_Update+0x12c>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001884:	1a84      	subs	r4, r0, r2
 8001886:	eb61 0503 	sbc.w	r5, r1, r3
 800188a:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <EncoderVelocity_Update+0x130>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800189e:	db04      	blt.n	80018aa <EncoderVelocity_Update+0x4a>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e007      	b.n	80018ba <EncoderVelocity_Update+0x5a>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 80018b0:	dc03      	bgt.n	80018ba <EncoderVelocity_Update+0x5a>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80018b8:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <EncoderVelocity_Update+0x130>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80018c0:	4932      	ldr	r1, [pc, #200]	; (800198c <EncoderVelocity_Update+0x12c>)
 80018c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c6:	e9c1 2300 	strd	r2, r3, [r1]
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7fe fdd6 	bl	800047c <__aeabi_i2d>
 80018d0:	a327      	add	r3, pc, #156	; (adr r3, 8001970 <EncoderVelocity_Update+0x110>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe3b 	bl	8000550 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8e5 	bl	8000ab0 <__aeabi_d2f>
 80018e6:	ee08 0a10 	vmov	s16, r0
 80018ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ee:	f7ff f9f7 	bl	8000ce0 <__aeabi_ul2f>
 80018f2:	ee07 0a10 	vmov	s14, r0
 80018f6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <EncoderVelocity_Update+0x134>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <EncoderVelocity_Update+0x134>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fdcb 	bl	80004a0 <__aeabi_f2d>
 800190a:	a31b      	add	r3, pc, #108	; (adr r3, 8001978 <EncoderVelocity_Update+0x118>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	f7fe fc60 	bl	80001e4 <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a314      	add	r3, pc, #80	; (adr r3, 8001980 <EncoderVelocity_Update+0x120>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe0d 	bl	8000550 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <EncoderVelocity_Update+0x138>)
 8001944:	f7fe ff2e 	bl	80007a4 <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f8ae 	bl	8000ab0 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <EncoderVelocity_Update+0x13c>)
 8001958:	6013      	str	r3, [r2, #0]
	return  rad;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <EncoderVelocity_Update+0x13c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	00000000 	.word	0x00000000
 8001974:	412e8480 	.word	0x412e8480
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fa99999 	.word	0x3fa99999
 8001980:	fc8b007a 	.word	0xfc8b007a
 8001984:	400921fa 	.word	0x400921fa
 8001988:	20000338 	.word	0x20000338
 800198c:	20000188 	.word	0x20000188
 8001990:	20000190 	.word	0x20000190
 8001994:	200000f8 	.word	0x200000f8
 8001998:	40768000 	.word	0x40768000
 800199c:	200000f4 	.word	0x200000f4

080019a0 <kalmanfilter>:


void kalmanfilter()
{    Q = pow(a,2);
 80019a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4bd6      	ldr	r3, [pc, #856]	; (8001d00 <kalmanfilter+0x360>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd78 	bl	80004a0 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001cf0 <kalmanfilter+0x350>
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f007 fc78 	bl	80092b0 <pow>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f872 	bl	8000ab0 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4acd      	ldr	r2, [pc, #820]	; (8001d04 <kalmanfilter+0x364>)
 80019d0:	6013      	str	r3, [r2, #0]
	 R = pow(w,2);
 80019d2:	4bcd      	ldr	r3, [pc, #820]	; (8001d08 <kalmanfilter+0x368>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8001cf0 <kalmanfilter+0x350>
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f007 fc62 	bl	80092b0 <pow>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f85c 	bl	8000ab0 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4ac4      	ldr	r2, [pc, #784]	; (8001d0c <kalmanfilter+0x36c>)
 80019fc:	6013      	str	r3, [r2, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 80019fe:	4bc4      	ldr	r3, [pc, #784]	; (8001d10 <kalmanfilter+0x370>)
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	4bc3      	ldr	r3, [pc, #780]	; (8001d14 <kalmanfilter+0x374>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0e:	4bc2      	ldr	r3, [pc, #776]	; (8001d18 <kalmanfilter+0x378>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	4bc0      	ldr	r3, [pc, #768]	; (8001d1c <kalmanfilter+0x37c>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001a1e:	4bbc      	ldr	r3, [pc, #752]	; (8001d10 <kalmanfilter+0x370>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4abf      	ldr	r2, [pc, #764]	; (8001d20 <kalmanfilter+0x380>)
 8001a24:	6013      	str	r3, [r2, #0]
	 y = (rad-omega_est);
 8001a26:	4bbf      	ldr	r3, [pc, #764]	; (8001d24 <kalmanfilter+0x384>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4bbc      	ldr	r3, [pc, #752]	; (8001d20 <kalmanfilter+0x380>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	4bbc      	ldr	r3, [pc, #752]	; (8001d28 <kalmanfilter+0x388>)
 8001a38:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001a3c:	4bb5      	ldr	r3, [pc, #724]	; (8001d14 <kalmanfilter+0x374>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	4bba      	ldr	r3, [pc, #744]	; (8001d2c <kalmanfilter+0x38c>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	4bb8      	ldr	r3, [pc, #736]	; (8001d30 <kalmanfilter+0x390>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a56:	ee17 0a90 	vmov	r0, s15
 8001a5a:	f7fe fd21 	bl	80004a0 <__aeabi_f2d>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4ba8      	ldr	r3, [pc, #672]	; (8001d04 <kalmanfilter+0x364>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd1a 	bl	80004a0 <__aeabi_f2d>
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	4689      	mov	r9, r1
 8001a70:	4ba8      	ldr	r3, [pc, #672]	; (8001d14 <kalmanfilter+0x374>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd13 	bl	80004a0 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001cf8 <kalmanfilter+0x358>
 8001a82:	ec43 2b10 	vmov	d0, r2, r3
 8001a86:	f007 fc13 	bl	80092b0 <pow>
 8001a8a:	ec53 2b10 	vmov	r2, r3, d0
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7fe fd5d 	bl	8000550 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4ba4      	ldr	r3, [pc, #656]	; (8001d34 <kalmanfilter+0x394>)
 8001aa4:	f7fe fe7e 	bl	80007a4 <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fb98 	bl	80001e4 <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4b95      	ldr	r3, [pc, #596]	; (8001d14 <kalmanfilter+0x374>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fced 	bl	80004a0 <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001cf0 <kalmanfilter+0x350>
 8001ace:	ec43 2b10 	vmov	d0, r2, r3
 8001ad2:	f007 fbed 	bl	80092b0 <pow>
 8001ad6:	ec59 8b10 	vmov	r8, r9, d0
 8001ada:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <kalmanfilter+0x374>)
 8001adc:	ed93 7a00 	vldr	s14, [r3]
 8001ae0:	4b95      	ldr	r3, [pc, #596]	; (8001d38 <kalmanfilter+0x398>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aea:	4b94      	ldr	r3, [pc, #592]	; (8001d3c <kalmanfilter+0x39c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	ee17 0a90 	vmov	r0, s15
 8001af8:	f7fe fcd2 	bl	80004a0 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4640      	mov	r0, r8
 8001b02:	4649      	mov	r1, r9
 8001b04:	f7fe fd24 	bl	8000550 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	4699      	mov	r9, r3
 8001b10:	4b80      	ldr	r3, [pc, #512]	; (8001d14 <kalmanfilter+0x374>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fcc3 	bl	80004a0 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4640      	mov	r0, r8
 8001b20:	4649      	mov	r1, r9
 8001b22:	f7fe fe3f 	bl	80007a4 <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fb59 	bl	80001e4 <__adddf3>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffb9 	bl	8000ab0 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a7b      	ldr	r2, [pc, #492]	; (8001d30 <kalmanfilter+0x390>)
 8001b42:	6013      	str	r3, [r2, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001b44:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <kalmanfilter+0x374>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <kalmanfilter+0x398>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <kalmanfilter+0x39c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fc9d 	bl	80004a0 <__aeabi_f2d>
 8001b66:	4604      	mov	r4, r0
 8001b68:	460d      	mov	r5, r1
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <kalmanfilter+0x364>)
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <kalmanfilter+0x374>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	ee17 0a90 	vmov	r0, s15
 8001b7e:	f7fe fc8f 	bl	80004a0 <__aeabi_f2d>
 8001b82:	4680      	mov	r8, r0
 8001b84:	4689      	mov	r9, r1
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <kalmanfilter+0x374>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc88 	bl	80004a0 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001cf0 <kalmanfilter+0x350>
 8001b98:	ec43 2b10 	vmov	d0, r2, r3
 8001b9c:	f007 fb88 	bl	80092b0 <pow>
 8001ba0:	ec53 2b10 	vmov	r2, r3, d0
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	f7fe fcd2 	bl	8000550 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	f7fe fdf2 	bl	80007a4 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb0c 	bl	80001e4 <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ff6c 	bl	8000ab0 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <kalmanfilter+0x39c>)
 8001bdc:	6013      	str	r3, [r2, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <kalmanfilter+0x374>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <kalmanfilter+0x38c>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	ee17 0a90 	vmov	r0, s15
 8001bf6:	f7fe fc53 	bl	80004a0 <__aeabi_f2d>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460d      	mov	r5, r1
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <kalmanfilter+0x364>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc4c 	bl	80004a0 <__aeabi_f2d>
 8001c08:	4680      	mov	r8, r0
 8001c0a:	4689      	mov	r9, r1
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <kalmanfilter+0x374>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc45 	bl	80004a0 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001cf8 <kalmanfilter+0x358>
 8001c1e:	ec43 2b10 	vmov	d0, r2, r3
 8001c22:	f007 fb45 	bl	80092b0 <pow>
 8001c26:	ec53 2b10 	vmov	r2, r3, d0
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	f7fe fc8f 	bl	8000550 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fad3 	bl	80001e4 <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <kalmanfilter+0x398>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c50:	ee17 0a90 	vmov	r0, s15
 8001c54:	f7fe fc24 	bl	80004a0 <__aeabi_f2d>
 8001c58:	4604      	mov	r4, r0
 8001c5a:	460d      	mov	r5, r1
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <kalmanfilter+0x374>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc1d 	bl	80004a0 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001cf0 <kalmanfilter+0x350>
 8001c6e:	ec43 2b10 	vmov	d0, r2, r3
 8001c72:	f007 fb1d 	bl	80092b0 <pow>
 8001c76:	ec53 2b10 	vmov	r2, r3, d0
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe fc67 	bl	8000550 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4640      	mov	r0, r8
 8001c88:	4649      	mov	r1, r9
 8001c8a:	f7fe faab 	bl	80001e4 <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <kalmanfilter+0x374>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca0:	ee17 0a90 	vmov	r0, s15
 8001ca4:	f7fe fbfc 	bl	80004a0 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fd78 	bl	80007a4 <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe fef8 	bl	8000ab0 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <kalmanfilter+0x38c>)
 8001cc4:	6013      	str	r3, [r2, #0]
    p22 = Q*pow(dt1,2)+p22;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <kalmanfilter+0x364>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fbe8 	bl	80004a0 <__aeabi_f2d>
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	460d      	mov	r5, r1
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <kalmanfilter+0x374>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fbe1 	bl	80004a0 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001cf0 <kalmanfilter+0x350>
 8001ce6:	ec43 2b10 	vmov	d0, r2, r3
 8001cea:	f007 fae1 	bl	80092b0 <pow>
 8001cee:	e027      	b.n	8001d40 <kalmanfilter+0x3a0>
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	40000000 	.word	0x40000000
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40100000 	.word	0x40100000
 8001d00:	20000014 	.word	0x20000014
 8001d04:	200000fc 	.word	0x200000fc
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	20000100 	.word	0x20000100
 8001d10:	20000124 	.word	0x20000124
 8001d14:	2000001c 	.word	0x2000001c
 8001d18:	2000010c 	.word	0x2000010c
 8001d1c:	20000104 	.word	0x20000104
 8001d20:	20000108 	.word	0x20000108
 8001d24:	200000f4 	.word	0x200000f4
 8001d28:	20000110 	.word	0x20000110
 8001d2c:	2000011c 	.word	0x2000011c
 8001d30:	20000114 	.word	0x20000114
 8001d34:	40100000 	.word	0x40100000
 8001d38:	20000120 	.word	0x20000120
 8001d3c:	20000118 	.word	0x20000118
 8001d40:	ec53 2b10 	vmov	r2, r3, d0
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fc02 	bl	8000550 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <kalmanfilter+0x560>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fba1 	bl	80004a0 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fa3d 	bl	80001e4 <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe fe9d 	bl	8000ab0 <__aeabi_d2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a61      	ldr	r2, [pc, #388]	; (8001f00 <kalmanfilter+0x560>)
 8001d7a:	6013      	str	r3, [r2, #0]

    theta_est+= (p12*y)/(R+p22);
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <kalmanfilter+0x564>)
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <kalmanfilter+0x568>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d8c:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <kalmanfilter+0x56c>)
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <kalmanfilter+0x560>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da0:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <kalmanfilter+0x570>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <kalmanfilter+0x570>)
 8001dac:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <kalmanfilter+0x560>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <kalmanfilter+0x568>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dc0:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <kalmanfilter+0x56c>)
 8001dc2:	ed93 7a00 	vldr	s14, [r3]
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <kalmanfilter+0x560>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <kalmanfilter+0x574>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dde:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <kalmanfilter+0x574>)
 8001de0:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <kalmanfilter+0x578>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <kalmanfilter+0x564>)
 8001dec:	edd3 6a00 	vldr	s13, [r3]
 8001df0:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <kalmanfilter+0x57c>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001dfa:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <kalmanfilter+0x56c>)
 8001dfc:	edd3 6a00 	vldr	s13, [r3]
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <kalmanfilter+0x560>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e0a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <kalmanfilter+0x578>)
 8001e14:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <kalmanfilter+0x564>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <kalmanfilter+0x560>)
 8001e20:	edd3 6a00 	vldr	s13, [r3]
 8001e24:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <kalmanfilter+0x57c>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <kalmanfilter+0x56c>)
 8001e30:	edd3 6a00 	vldr	s13, [r3]
 8001e34:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <kalmanfilter+0x560>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <kalmanfilter+0x564>)
 8001e48:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <kalmanfilter+0x57c>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eeb1 7a67 	vneg.f32	s14, s15
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <kalmanfilter+0x560>)
 8001e58:	ed93 6a00 	vldr	s12, [r3]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <kalmanfilter+0x56c>)
 8001e5e:	edd3 6a00 	vldr	s13, [r3]
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <kalmanfilter+0x560>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <kalmanfilter+0x57c>)
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <kalmanfilter+0x560>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eeb1 7a67 	vneg.f32	s14, s15
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <kalmanfilter+0x560>)
 8001e8e:	ed93 6a00 	vldr	s12, [r3]
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <kalmanfilter+0x56c>)
 8001e94:	edd3 6a00 	vldr	s13, [r3]
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <kalmanfilter+0x560>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ea2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <kalmanfilter+0x560>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <kalmanfilter+0x570>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <kalmanfilter+0x580>)
 8001ebe:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <kalmanfilter+0x574>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <kalmanfilter+0x584>)
 8001ec6:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <kalmanfilter+0x570>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fae7 	bl	80004a0 <__aeabi_f2d>
 8001ed2:	a309      	add	r3, pc, #36	; (adr r3, 8001ef8 <kalmanfilter+0x558>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb3a 	bl	8000550 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fde4 	bl	8000ab0 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <kalmanfilter+0x588>)
 8001eec:	6013      	str	r3, [r2, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	c63f1412 	.word	0xc63f1412
 8001efc:	404ca5dc 	.word	0x404ca5dc
 8001f00:	20000120 	.word	0x20000120
 8001f04:	20000118 	.word	0x20000118
 8001f08:	20000110 	.word	0x20000110
 8001f0c:	20000100 	.word	0x20000100
 8001f10:	20000104 	.word	0x20000104
 8001f14:	20000108 	.word	0x20000108
 8001f18:	20000114 	.word	0x20000114
 8001f1c:	2000011c 	.word	0x2000011c
 8001f20:	2000010c 	.word	0x2000010c
 8001f24:	20000124 	.word	0x20000124
 8001f28:	20000178 	.word	0x20000178
 8001f2c:	00000000 	.word	0x00000000

08001f30 <planning>:
  sa = now_postion;   //rad
}

void planning()

{ t=t+0.01;
 8001f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4b9e      	ldr	r3, [pc, #632]	; (80021b0 <planning+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fab0 	bl	80004a0 <__aeabi_f2d>
 8001f40:	a393      	add	r3, pc, #588	; (adr r3, 8002190 <planning+0x260>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f94d 	bl	80001e4 <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fdad 	bl	8000ab0 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a95      	ldr	r2, [pc, #596]	; (80021b0 <planning+0x280>)
 8001f5a:	6013      	str	r3, [r2, #0]
  Vmax = 0.400;               //rad/s
 8001f5c:	4b95      	ldr	r3, [pc, #596]	; (80021b4 <planning+0x284>)
 8001f5e:	4a96      	ldr	r2, [pc, #600]	; (80021b8 <planning+0x288>)
 8001f60:	601a      	str	r2, [r3, #0]
  sb=angle*0.0174533;            //degree 2 rad
 8001f62:	4b96      	ldr	r3, [pc, #600]	; (80021bc <planning+0x28c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa9a 	bl	80004a0 <__aeabi_f2d>
 8001f6c:	a38a      	add	r3, pc, #552	; (adr r3, 8002198 <planning+0x268>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe faed 	bl	8000550 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fd97 	bl	8000ab0 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a8e      	ldr	r2, [pc, #568]	; (80021c0 <planning+0x290>)
 8001f86:	6013      	str	r3, [r2, #0]
//  sa=45*0.0174533;			//sa = last angle from Home
  sa=0;
 8001f88:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <planning+0x294>)
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
  tf = 15.00*(sb-sa)/(8.00*Vmax);     //get tf from vmax
 8001f90:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <planning+0x290>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <planning+0x294>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	ee17 0a90 	vmov	r0, s15
 8001fa4:	f7fe fa7c 	bl	80004a0 <__aeabi_f2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b86      	ldr	r3, [pc, #536]	; (80021c8 <planning+0x298>)
 8001fae:	f7fe facf 	bl	8000550 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <planning+0x284>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa6e 	bl	80004a0 <__aeabi_f2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b80      	ldr	r3, [pc, #512]	; (80021cc <planning+0x29c>)
 8001fca:	f7fe fac1 	bl	8000550 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f7fe fbe5 	bl	80007a4 <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fd65 	bl	8000ab0 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a79      	ldr	r2, [pc, #484]	; (80021d0 <planning+0x2a0>)
 8001fea:	6013      	str	r3, [r2, #0]

  if (angle<=12)
 8001fec:	4b73      	ldr	r3, [pc, #460]	; (80021bc <planning+0x28c>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	d80e      	bhi.n	800201e <planning+0xee>
  {flag_case1=1;flag_case2=0;flag_case3=0;flag_case4=0;flag_case5=0;}
 8002000:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <planning+0x2a4>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <planning+0x2a8>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	4b73      	ldr	r3, [pc, #460]	; (80021dc <planning+0x2ac>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <planning+0x2b0>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <planning+0x2b4>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]

  if (angle>12 && angle<=30)
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <planning+0x28c>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	dd18      	ble.n	8002064 <planning+0x134>
 8002032:	4b62      	ldr	r3, [pc, #392]	; (80021bc <planning+0x28c>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800203c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	d80e      	bhi.n	8002064 <planning+0x134>
  { flag_case3=1;flag_case1=0;flag_case2=0;flag_case4=0;flag_case5=0;}
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <planning+0x2ac>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <planning+0x2a4>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <planning+0x2a8>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <planning+0x2b0>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <planning+0x2b4>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

  if (angle>30 && angle<=60)
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <planning+0x28c>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800206e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	dd18      	ble.n	80020aa <planning+0x17a>
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <planning+0x28c>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80021e8 <planning+0x2b8>
 8002082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d80e      	bhi.n	80020aa <planning+0x17a>
  {flag_case1=0;flag_case2=0;flag_case3=0;flag_case4=1;flag_case5=0;}
 800208c:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <planning+0x2a4>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <planning+0x2a8>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <planning+0x2ac>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <planning+0x2b0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <planning+0x2b4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

  if (angle>60 && angle<=90)
 80020aa:	4b44      	ldr	r3, [pc, #272]	; (80021bc <planning+0x28c>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80021e8 <planning+0x2b8>
 80020b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	dd18      	ble.n	80020f0 <planning+0x1c0>
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <planning+0x28c>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80021ec <planning+0x2bc>
 80020c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d80e      	bhi.n	80020f0 <planning+0x1c0>
   {flag_case1=0;flag_case2=0;flag_case3=0;flag_case4=0;flag_case5=1;}
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <planning+0x2a4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <planning+0x2a8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <planning+0x2ac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <planning+0x2b0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <planning+0x2b4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]

  if (angle>90){
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <planning+0x28c>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80021ec <planning+0x2bc>
 80020fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dc00      	bgt.n	8002106 <planning+0x1d6>
	  if(t<=tf){
	  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
	  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
	  else{t=tf;vb=0;PWMOut=0;}
  }
}
 8002104:	e27e      	b.n	8002604 <planning+0x6d4>
	  flag_case1=0;flag_case3=0;
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <planning+0x2a4>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <planning+0x2ac>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
	  flag_case2=1;
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <planning+0x2a8>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
	  if(0.5>=(5.7335*(sb-sa)/(pow(tf,2))))  //check accerelation
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <planning+0x290>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <planning+0x294>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002128:	ee17 0a90 	vmov	r0, s15
 800212c:	f7fe f9b8 	bl	80004a0 <__aeabi_f2d>
 8002130:	a31b      	add	r3, pc, #108	; (adr r3, 80021a0 <planning+0x270>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa0b 	bl	8000550 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <planning+0x2a0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9aa 	bl	80004a0 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80021a8 <planning+0x278>
 8002154:	ec43 2b10 	vmov	d0, r2, r3
 8002158:	f007 f8aa 	bl	80092b0 <pow>
 800215c:	ec53 2b10 	vmov	r2, r3, d0
 8002160:	4620      	mov	r0, r4
 8002162:	4629      	mov	r1, r5
 8002164:	f7fe fb1e 	bl	80007a4 <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <planning+0x2c0>)
 8002176:	f7fe fc67 	bl	8000a48 <__aeabi_dcmple>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d039      	beq.n	80021f4 <planning+0x2c4>
	  {tf=tf;}
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <planning+0x2a0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <planning+0x2a0>)
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e063      	b.n	8002252 <planning+0x322>
 800218a:	bf00      	nop
 800218c:	f3af 8000 	nop.w
 8002190:	47ae147b 	.word	0x47ae147b
 8002194:	3f847ae1 	.word	0x3f847ae1
 8002198:	22d4405f 	.word	0x22d4405f
 800219c:	3f91df47 	.word	0x3f91df47
 80021a0:	9fbe76c9 	.word	0x9fbe76c9
 80021a4:	4016ef1a 	.word	0x4016ef1a
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40000000 	.word	0x40000000
 80021b0:	20000154 	.word	0x20000154
 80021b4:	20000158 	.word	0x20000158
 80021b8:	3ecccccd 	.word	0x3ecccccd
 80021bc:	20000174 	.word	0x20000174
 80021c0:	20000140 	.word	0x20000140
 80021c4:	20000144 	.word	0x20000144
 80021c8:	402e0000 	.word	0x402e0000
 80021cc:	40200000 	.word	0x40200000
 80021d0:	20000148 	.word	0x20000148
 80021d4:	20000180 	.word	0x20000180
 80021d8:	20000181 	.word	0x20000181
 80021dc:	20000182 	.word	0x20000182
 80021e0:	20000183 	.word	0x20000183
 80021e4:	20000184 	.word	0x20000184
 80021e8:	42700000 	.word	0x42700000
 80021ec:	42b40000 	.word	0x42b40000
 80021f0:	3fe00000 	.word	0x3fe00000
	  else{tf=pow((5.7335*(sb-sa)/0.5),0.5);}
 80021f4:	4bda      	ldr	r3, [pc, #872]	; (8002560 <planning+0x630>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	4bda      	ldr	r3, [pc, #872]	; (8002564 <planning+0x634>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002204:	ee17 0a90 	vmov	r0, s15
 8002208:	f7fe f94a 	bl	80004a0 <__aeabi_f2d>
 800220c:	a3c8      	add	r3, pc, #800	; (adr r3, 8002530 <planning+0x600>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe f99d 	bl	8000550 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4bd1      	ldr	r3, [pc, #836]	; (8002568 <planning+0x638>)
 8002224:	f7fe fabe 	bl	80007a4 <__aeabi_ddiv>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	ec43 2b17 	vmov	d7, r2, r3
 8002230:	ed9f 1bc1 	vldr	d1, [pc, #772]	; 8002538 <planning+0x608>
 8002234:	eeb0 0a47 	vmov.f32	s0, s14
 8002238:	eef0 0a67 	vmov.f32	s1, s15
 800223c:	f007 f838 	bl	80092b0 <pow>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fc32 	bl	8000ab0 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	4ac7      	ldr	r2, [pc, #796]	; (800256c <planning+0x63c>)
 8002250:	6013      	str	r3, [r2, #0]
	  a0=0;
 8002252:	4bc7      	ldr	r3, [pc, #796]	; (8002570 <planning+0x640>)
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
	  a1=0;
 800225a:	4bc6      	ldr	r3, [pc, #792]	; (8002574 <planning+0x644>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
	  a2=0;
 8002262:	4bc5      	ldr	r3, [pc, #788]	; (8002578 <planning+0x648>)
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
	  a3= 10.00*(sb-sa)/(pow(tf,3));
 800226a:	4bbd      	ldr	r3, [pc, #756]	; (8002560 <planning+0x630>)
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	4bbc      	ldr	r3, [pc, #752]	; (8002564 <planning+0x634>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227a:	ee17 0a90 	vmov	r0, s15
 800227e:	f7fe f90f 	bl	80004a0 <__aeabi_f2d>
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	4bbd      	ldr	r3, [pc, #756]	; (800257c <planning+0x64c>)
 8002288:	f7fe f962 	bl	8000550 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4614      	mov	r4, r2
 8002292:	461d      	mov	r5, r3
 8002294:	4bb5      	ldr	r3, [pc, #724]	; (800256c <planning+0x63c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f901 	bl	80004a0 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8002540 <planning+0x610>
 80022a6:	ec43 2b10 	vmov	d0, r2, r3
 80022aa:	f007 f801 	bl	80092b0 <pow>
 80022ae:	ec53 2b10 	vmov	r2, r3, d0
 80022b2:	4620      	mov	r0, r4
 80022b4:	4629      	mov	r1, r5
 80022b6:	f7fe fa75 	bl	80007a4 <__aeabi_ddiv>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7fe fbf5 	bl	8000ab0 <__aeabi_d2f>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4aad      	ldr	r2, [pc, #692]	; (8002580 <planning+0x650>)
 80022ca:	6013      	str	r3, [r2, #0]
	  a4= -15.00*(sb-sa)/(pow(tf,4));
 80022cc:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <planning+0x630>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4ba4      	ldr	r3, [pc, #656]	; (8002564 <planning+0x634>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	ee17 0a90 	vmov	r0, s15
 80022e0:	f7fe f8de 	bl	80004a0 <__aeabi_f2d>
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4ba6      	ldr	r3, [pc, #664]	; (8002584 <planning+0x654>)
 80022ea:	f7fe f931 	bl	8000550 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	4b9d      	ldr	r3, [pc, #628]	; (800256c <planning+0x63c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f8d0 	bl	80004a0 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8002548 <planning+0x618>
 8002308:	ec43 2b10 	vmov	d0, r2, r3
 800230c:	f006 ffd0 	bl	80092b0 <pow>
 8002310:	ec53 2b10 	vmov	r2, r3, d0
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe fa44 	bl	80007a4 <__aeabi_ddiv>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fbc4 	bl	8000ab0 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	4a97      	ldr	r2, [pc, #604]	; (8002588 <planning+0x658>)
 800232c:	6013      	str	r3, [r2, #0]
	  a5= 6.00*(sb-sa)/(pow(tf,5));
 800232e:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <planning+0x630>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <planning+0x634>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233e:	ee17 0a90 	vmov	r0, s15
 8002342:	f7fe f8ad 	bl	80004a0 <__aeabi_f2d>
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b90      	ldr	r3, [pc, #576]	; (800258c <planning+0x65c>)
 800234c:	f7fe f900 	bl	8000550 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	4b84      	ldr	r3, [pc, #528]	; (800256c <planning+0x63c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f89f 	bl	80004a0 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8002550 <planning+0x620>
 800236a:	ec43 2b10 	vmov	d0, r2, r3
 800236e:	f006 ff9f 	bl	80092b0 <pow>
 8002372:	ec53 2b10 	vmov	r2, r3, d0
 8002376:	4620      	mov	r0, r4
 8002378:	4629      	mov	r1, r5
 800237a:	f7fe fa13 	bl	80007a4 <__aeabi_ddiv>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fb93 	bl	8000ab0 <__aeabi_d2f>
 800238a:	4603      	mov	r3, r0
 800238c:	4a80      	ldr	r2, [pc, #512]	; (8002590 <planning+0x660>)
 800238e:	6013      	str	r3, [r2, #0]
	  if(t<=tf){
 8002390:	4b80      	ldr	r3, [pc, #512]	; (8002594 <planning+0x664>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b75      	ldr	r3, [pc, #468]	; (800256c <planning+0x63c>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	f200 8123 	bhi.w	80025ee <planning+0x6be>
	  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <planning+0x650>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f877 	bl	80004a0 <__aeabi_f2d>
 80023b2:	4604      	mov	r4, r0
 80023b4:	460d      	mov	r5, r1
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <planning+0x664>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f870 	bl	80004a0 <__aeabi_f2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002540 <planning+0x610>
 80023c8:	ec43 2b10 	vmov	d0, r2, r3
 80023cc:	f006 ff70 	bl	80092b0 <pow>
 80023d0:	ec53 2b10 	vmov	r2, r3, d0
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fe f8ba 	bl	8000550 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4690      	mov	r8, r2
 80023e2:	4699      	mov	r9, r3
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <planning+0x658>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f859 	bl	80004a0 <__aeabi_f2d>
 80023ee:	4604      	mov	r4, r0
 80023f0:	460d      	mov	r5, r1
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <planning+0x664>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f852 	bl	80004a0 <__aeabi_f2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002548 <planning+0x618>
 8002404:	ec43 2b10 	vmov	d0, r2, r3
 8002408:	f006 ff52 	bl	80092b0 <pow>
 800240c:	ec53 2b10 	vmov	r2, r3, d0
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f89c 	bl	8000550 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4640      	mov	r0, r8
 800241e:	4649      	mov	r1, r9
 8002420:	f7fd fee0 	bl	80001e4 <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4690      	mov	r8, r2
 800242a:	4699      	mov	r9, r3
 800242c:	4b58      	ldr	r3, [pc, #352]	; (8002590 <planning+0x660>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f835 	bl	80004a0 <__aeabi_f2d>
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <planning+0x664>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8002550 <planning+0x620>
 800244c:	ec43 2b10 	vmov	d0, r2, r3
 8002450:	f006 ff2e 	bl	80092b0 <pow>
 8002454:	ec53 2b10 	vmov	r2, r3, d0
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fe f878 	bl	8000550 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4640      	mov	r0, r8
 8002466:	4649      	mov	r1, r9
 8002468:	f7fd febc 	bl	80001e4 <__adddf3>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb1c 	bl	8000ab0 <__aeabi_d2f>
 8002478:	4603      	mov	r3, r0
 800247a:	4a47      	ldr	r2, [pc, #284]	; (8002598 <planning+0x668>)
 800247c:	6013      	str	r3, [r2, #0]
	  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <planning+0x650>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	ee17 0a90 	vmov	r0, s15
 8002490:	f7fe f806 	bl	80004a0 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <planning+0x664>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffff 	bl	80004a0 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002558 <planning+0x628>
 80024aa:	ec43 2b10 	vmov	d0, r2, r3
 80024ae:	f006 feff 	bl	80092b0 <pow>
 80024b2:	ec53 2b10 	vmov	r2, r3, d0
 80024b6:	4620      	mov	r0, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	f7fe f849 	bl	8000550 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4690      	mov	r8, r2
 80024c4:	4699      	mov	r9, r3
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <planning+0x658>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	ee17 0a90 	vmov	r0, s15
 80024d8:	f7fd ffe2 	bl	80004a0 <__aeabi_f2d>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <planning+0x664>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffdb 	bl	80004a0 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002540 <planning+0x610>
 80024f2:	ec43 2b10 	vmov	d0, r2, r3
 80024f6:	f006 fedb 	bl	80092b0 <pow>
 80024fa:	ec53 2b10 	vmov	r2, r3, d0
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f825 	bl	8000550 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4640      	mov	r0, r8
 800250c:	4649      	mov	r1, r9
 800250e:	f7fd fe69 	bl	80001e4 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <planning+0x660>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	e038      	b.n	800259c <planning+0x66c>
 800252a:	bf00      	nop
 800252c:	f3af 8000 	nop.w
 8002530:	9fbe76c9 	.word	0x9fbe76c9
 8002534:	4016ef1a 	.word	0x4016ef1a
 8002538:	00000000 	.word	0x00000000
 800253c:	3fe00000 	.word	0x3fe00000
 8002540:	00000000 	.word	0x00000000
 8002544:	40080000 	.word	0x40080000
 8002548:	00000000 	.word	0x00000000
 800254c:	40100000 	.word	0x40100000
 8002550:	00000000 	.word	0x00000000
 8002554:	40140000 	.word	0x40140000
 8002558:	00000000 	.word	0x00000000
 800255c:	40000000 	.word	0x40000000
 8002560:	20000140 	.word	0x20000140
 8002564:	20000144 	.word	0x20000144
 8002568:	3fe00000 	.word	0x3fe00000
 800256c:	20000148 	.word	0x20000148
 8002570:	20000128 	.word	0x20000128
 8002574:	2000012c 	.word	0x2000012c
 8002578:	20000130 	.word	0x20000130
 800257c:	40240000 	.word	0x40240000
 8002580:	20000134 	.word	0x20000134
 8002584:	c02e0000 	.word	0xc02e0000
 8002588:	20000138 	.word	0x20000138
 800258c:	40180000 	.word	0x40180000
 8002590:	2000013c 	.word	0x2000013c
 8002594:	20000154 	.word	0x20000154
 8002598:	20000150 	.word	0x20000150
 800259c:	ee17 0a90 	vmov	r0, s15
 80025a0:	f7fd ff7e 	bl	80004a0 <__aeabi_f2d>
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <planning+0x6e8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff77 	bl	80004a0 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002610 <planning+0x6e0>
 80025ba:	ec43 2b10 	vmov	d0, r2, r3
 80025be:	f006 fe77 	bl	80092b0 <pow>
 80025c2:	ec53 2b10 	vmov	r2, r3, d0
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f7fd ffc1 	bl	8000550 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4640      	mov	r0, r8
 80025d4:	4649      	mov	r1, r9
 80025d6:	f7fd fe05 	bl	80001e4 <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fa65 	bl	8000ab0 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <planning+0x6ec>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	e00a      	b.n	8002604 <planning+0x6d4>
	  else{t=tf;vb=0;PWMOut=0;}
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <planning+0x6f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <planning+0x6e8>)
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <planning+0x6ec>)
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <planning+0x6f4>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	40100000 	.word	0x40100000
 8002618:	20000154 	.word	0x20000154
 800261c:	2000014c 	.word	0x2000014c
 8002620:	20000148 	.word	0x20000148
 8002624:	200000d0 	.word	0x200000d0

08002628 <pid>:

void pid()
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	if  (flag_case2==1){
 800262c:	4bb2      	ldr	r3, [pc, #712]	; (80028f8 <pid+0x2d0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d15b      	bne.n	80026ec <pid+0xc4>
		 error = vb-omega_est;
 8002634:	4bb1      	ldr	r3, [pc, #708]	; (80028fc <pid+0x2d4>)
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	4bb1      	ldr	r3, [pc, #708]	; (8002900 <pid+0x2d8>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002644:	4baf      	ldr	r3, [pc, #700]	; (8002904 <pid+0x2dc>)
 8002646:	edc3 7a00 	vstr	s15, [r3]
		 p = (error);
 800264a:	4bae      	ldr	r3, [pc, #696]	; (8002904 <pid+0x2dc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4aae      	ldr	r2, [pc, #696]	; (8002908 <pid+0x2e0>)
 8002650:	6013      	str	r3, [r2, #0]
		 i = i+error;
 8002652:	4bae      	ldr	r3, [pc, #696]	; (800290c <pid+0x2e4>)
 8002654:	ed93 7a00 	vldr	s14, [r3]
 8002658:	4baa      	ldr	r3, [pc, #680]	; (8002904 <pid+0x2dc>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	4baa      	ldr	r3, [pc, #680]	; (800290c <pid+0x2e4>)
 8002664:	edc3 7a00 	vstr	s15, [r3]
		 d = error - pre_error;
 8002668:	4ba6      	ldr	r3, [pc, #664]	; (8002904 <pid+0x2dc>)
 800266a:	ed93 7a00 	vldr	s14, [r3]
 800266e:	4ba8      	ldr	r3, [pc, #672]	; (8002910 <pid+0x2e8>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002678:	4ba6      	ldr	r3, [pc, #664]	; (8002914 <pid+0x2ec>)
 800267a:	edc3 7a00 	vstr	s15, [r3]
		 pre_error = error;
 800267e:	4ba1      	ldr	r3, [pc, #644]	; (8002904 <pid+0x2dc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4aa3      	ldr	r2, [pc, #652]	; (8002910 <pid+0x2e8>)
 8002684:	6013      	str	r3, [r2, #0]
		 PWMOut =195+( (p*K_P)+(i*K_I)+(d*K_D));
 8002686:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <pid+0x2e0>)
 8002688:	ed93 7a00 	vldr	s14, [r3]
 800268c:	4ba2      	ldr	r3, [pc, #648]	; (8002918 <pid+0x2f0>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	4b9d      	ldr	r3, [pc, #628]	; (800290c <pid+0x2e4>)
 8002698:	edd3 6a00 	vldr	s13, [r3]
 800269c:	4b9f      	ldr	r3, [pc, #636]	; (800291c <pid+0x2f4>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026aa:	4b9a      	ldr	r3, [pc, #616]	; (8002914 <pid+0x2ec>)
 80026ac:	edd3 6a00 	vldr	s13, [r3]
 80026b0:	4b9b      	ldr	r3, [pc, #620]	; (8002920 <pid+0x2f8>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002924 <pid+0x2fc>
 80026c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ca:	ee17 2a90 	vmov	r2, s15
 80026ce:	4b96      	ldr	r3, [pc, #600]	; (8002928 <pid+0x300>)
 80026d0:	601a      	str	r2, [r3, #0]
		 if(vb==0)
 80026d2:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <pid+0x2d4>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	f040 81ae 	bne.w	8002a40 <pid+0x418>
		 {PWMOut=0;}
 80026e4:	4b90      	ldr	r3, [pc, #576]	; (8002928 <pid+0x300>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
				else if((RobotArm_Position) == (float)(angle/0.05))
				{
					PWMOut=0;
				}
			}
}
 80026ea:	e1a9      	b.n	8002a40 <pid+0x418>
	else if (flag_case1==1)
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <pid+0x304>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d15b      	bne.n	80027ac <pid+0x184>
		if((RobotArm_Position) < (float)(angle/0.05))
 80026f4:	4b8e      	ldr	r3, [pc, #568]	; (8002930 <pid+0x308>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fed1 	bl	80004a0 <__aeabi_f2d>
 80026fe:	a37c      	add	r3, pc, #496	; (adr r3, 80028f0 <pid+0x2c8>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fe f84e 	bl	80007a4 <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f9ce 	bl	8000ab0 <__aeabi_d2f>
 8002714:	ee07 0a10 	vmov	s14, r0
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <pid+0x30c>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	dd04      	ble.n	8002732 <pid+0x10a>
			PWMOut=400;
 8002728:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <pid+0x300>)
 800272a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	e186      	b.n	8002a40 <pid+0x418>
		else if((RobotArm_Position) > (float)(angle/0.05))
 8002732:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <pid+0x308>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd feb2 	bl	80004a0 <__aeabi_f2d>
 800273c:	a36c      	add	r3, pc, #432	; (adr r3, 80028f0 <pid+0x2c8>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fe f82f 	bl	80007a4 <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe f9af 	bl	8000ab0 <__aeabi_d2f>
 8002752:	ee07 0a10 	vmov	s14, r0
 8002756:	4b77      	ldr	r3, [pc, #476]	; (8002934 <pid+0x30c>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d503      	bpl.n	800276e <pid+0x146>
					PWMOut=-400;
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <pid+0x300>)
 8002768:	4a73      	ldr	r2, [pc, #460]	; (8002938 <pid+0x310>)
 800276a:	601a      	str	r2, [r3, #0]
}
 800276c:	e168      	b.n	8002a40 <pid+0x418>
		else if((RobotArm_Position) == (float)(angle/0.05))
 800276e:	4b70      	ldr	r3, [pc, #448]	; (8002930 <pid+0x308>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fe94 	bl	80004a0 <__aeabi_f2d>
 8002778:	a35d      	add	r3, pc, #372	; (adr r3, 80028f0 <pid+0x2c8>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f7fe f811 	bl	80007a4 <__aeabi_ddiv>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe f991 	bl	8000ab0 <__aeabi_d2f>
 800278e:	ee07 0a10 	vmov	s14, r0
 8002792:	4b68      	ldr	r3, [pc, #416]	; (8002934 <pid+0x30c>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eeb4 7a67 	vcmp.f32	s14, s15
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	f040 814e 	bne.w	8002a40 <pid+0x418>
			PWMOut=0;
 80027a4:	4b60      	ldr	r3, [pc, #384]	; (8002928 <pid+0x300>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	e149      	b.n	8002a40 <pid+0x418>
	else if (flag_case3==1)
 80027ac:	4b63      	ldr	r3, [pc, #396]	; (800293c <pid+0x314>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d15b      	bne.n	800286c <pid+0x244>
			if((RobotArm_Position) < (float)(angle/0.05))
 80027b4:	4b5e      	ldr	r3, [pc, #376]	; (8002930 <pid+0x308>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe71 	bl	80004a0 <__aeabi_f2d>
 80027be:	a34c      	add	r3, pc, #304	; (adr r3, 80028f0 <pid+0x2c8>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd ffee 	bl	80007a4 <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f96e 	bl	8000ab0 <__aeabi_d2f>
 80027d4:	ee07 0a10 	vmov	s14, r0
 80027d8:	4b56      	ldr	r3, [pc, #344]	; (8002934 <pid+0x30c>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	dd04      	ble.n	80027f2 <pid+0x1ca>
				PWMOut=1000;
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <pid+0x300>)
 80027ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	e126      	b.n	8002a40 <pid+0x418>
			else if((RobotArm_Position) > (float)(angle/0.05))
 80027f2:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <pid+0x308>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe52 	bl	80004a0 <__aeabi_f2d>
 80027fc:	a33c      	add	r3, pc, #240	; (adr r3, 80028f0 <pid+0x2c8>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ffcf 	bl	80007a4 <__aeabi_ddiv>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f7fe f94f 	bl	8000ab0 <__aeabi_d2f>
 8002812:	ee07 0a10 	vmov	s14, r0
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <pid+0x30c>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	d503      	bpl.n	800282e <pid+0x206>
						PWMOut=-400;
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <pid+0x300>)
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <pid+0x310>)
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	e108      	b.n	8002a40 <pid+0x418>
			else if((RobotArm_Position) == (float)(angle/0.05))
 800282e:	4b40      	ldr	r3, [pc, #256]	; (8002930 <pid+0x308>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe34 	bl	80004a0 <__aeabi_f2d>
 8002838:	a32d      	add	r3, pc, #180	; (adr r3, 80028f0 <pid+0x2c8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd ffb1 	bl	80007a4 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f7fe f931 	bl	8000ab0 <__aeabi_d2f>
 800284e:	ee07 0a10 	vmov	s14, r0
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <pid+0x30c>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	eeb4 7a67 	vcmp.f32	s14, s15
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	f040 80ee 	bne.w	8002a40 <pid+0x418>
				PWMOut=0;
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <pid+0x300>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	e0e9      	b.n	8002a40 <pid+0x418>
	else if (flag_case4==1)
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <pid+0x318>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	f040 8087 	bne.w	8002984 <pid+0x35c>
				if((RobotArm_Position) < (float)(angle/0.05))
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <pid+0x308>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe10 	bl	80004a0 <__aeabi_f2d>
 8002880:	a31b      	add	r3, pc, #108	; (adr r3, 80028f0 <pid+0x2c8>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd ff8d 	bl	80007a4 <__aeabi_ddiv>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f90d 	bl	8000ab0 <__aeabi_d2f>
 8002896:	ee07 0a10 	vmov	s14, r0
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <pid+0x30c>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a8:	dd04      	ble.n	80028b4 <pid+0x28c>
					PWMOut=1500;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <pid+0x300>)
 80028ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	e0c5      	b.n	8002a40 <pid+0x418>
				else if((RobotArm_Position) > (float)(angle/0.05))
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <pid+0x308>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fdf1 	bl	80004a0 <__aeabi_f2d>
 80028be:	a30c      	add	r3, pc, #48	; (adr r3, 80028f0 <pid+0x2c8>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd ff6e 	bl	80007a4 <__aeabi_ddiv>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f8ee 	bl	8000ab0 <__aeabi_d2f>
 80028d4:	ee07 0a10 	vmov	s14, r0
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <pid+0x30c>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d52f      	bpl.n	8002948 <pid+0x320>
							PWMOut=-300;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <pid+0x300>)
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <pid+0x31c>)
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	e0a7      	b.n	8002a40 <pid+0x418>
 80028f0:	9999999a 	.word	0x9999999a
 80028f4:	3fa99999 	.word	0x3fa99999
 80028f8:	20000181 	.word	0x20000181
 80028fc:	2000014c 	.word	0x2000014c
 8002900:	20000108 	.word	0x20000108
 8002904:	2000016c 	.word	0x2000016c
 8002908:	2000015c 	.word	0x2000015c
 800290c:	20000160 	.word	0x20000160
 8002910:	20000168 	.word	0x20000168
 8002914:	20000164 	.word	0x20000164
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20000010 	.word	0x20000010
 8002920:	200000f0 	.word	0x200000f0
 8002924:	43430000 	.word	0x43430000
 8002928:	200000d0 	.word	0x200000d0
 800292c:	20000180 	.word	0x20000180
 8002930:	20000174 	.word	0x20000174
 8002934:	200000d4 	.word	0x200000d4
 8002938:	fffffe70 	.word	0xfffffe70
 800293c:	20000182 	.word	0x20000182
 8002940:	20000183 	.word	0x20000183
 8002944:	fffffed4 	.word	0xfffffed4
				else if((RobotArm_Position) == (float)(angle/0.05))
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <pid+0x428>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fda7 	bl	80004a0 <__aeabi_f2d>
 8002952:	a33d      	add	r3, pc, #244	; (adr r3, 8002a48 <pid+0x420>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd ff24 	bl	80007a4 <__aeabi_ddiv>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f8a4 	bl	8000ab0 <__aeabi_d2f>
 8002968:	ee07 0a10 	vmov	s14, r0
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <pid+0x42c>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	eeb4 7a67 	vcmp.f32	s14, s15
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	d161      	bne.n	8002a40 <pid+0x418>
					PWMOut=0;
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <pid+0x430>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	e05d      	b.n	8002a40 <pid+0x418>
	else if (flag_case5==1)
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <pid+0x434>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d159      	bne.n	8002a40 <pid+0x418>
				if((RobotArm_Position) < (float)(angle/0.05))
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <pid+0x428>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fd85 	bl	80004a0 <__aeabi_f2d>
 8002996:	a32c      	add	r3, pc, #176	; (adr r3, 8002a48 <pid+0x420>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd ff02 	bl	80007a4 <__aeabi_ddiv>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f882 	bl	8000ab0 <__aeabi_d2f>
 80029ac:	ee07 0a10 	vmov	s14, r0
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <pid+0x42c>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	dd04      	ble.n	80029ca <pid+0x3a2>
					PWMOut=1600;
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <pid+0x430>)
 80029c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	e03a      	b.n	8002a40 <pid+0x418>
				else if((RobotArm_Position) > (float)(angle/0.05))
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <pid+0x428>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fd66 	bl	80004a0 <__aeabi_f2d>
 80029d4:	a31c      	add	r3, pc, #112	; (adr r3, 8002a48 <pid+0x420>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fee3 	bl	80007a4 <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f863 	bl	8000ab0 <__aeabi_d2f>
 80029ea:	ee07 0a10 	vmov	s14, r0
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <pid+0x42c>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d503      	bpl.n	8002a06 <pid+0x3de>
							PWMOut=-300;
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <pid+0x430>)
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <pid+0x438>)
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	e01c      	b.n	8002a40 <pid+0x418>
				else if((RobotArm_Position) == (float)(angle/0.05))
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <pid+0x428>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd48 	bl	80004a0 <__aeabi_f2d>
 8002a10:	a30d      	add	r3, pc, #52	; (adr r3, 8002a48 <pid+0x420>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fec5 	bl	80007a4 <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fe f845 	bl	8000ab0 <__aeabi_d2f>
 8002a26:	ee07 0a10 	vmov	s14, r0
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <pid+0x42c>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d102      	bne.n	8002a40 <pid+0x418>
					PWMOut=0;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <pid+0x430>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	f3af 8000 	nop.w
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	3fa99999 	.word	0x3fa99999
 8002a50:	20000174 	.word	0x20000174
 8002a54:	200000d4 	.word	0x200000d4
 8002a58:	200000d0 	.word	0x200000d0
 8002a5c:	20000184 	.word	0x20000184
 8002a60:	fffffed4 	.word	0xfffffed4

08002a64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8002a7e:	f143 0500 	adc.w	r5, r3, #0
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a84:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim==&htim4)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
		  EncoderVelocity_Update();
 8002a90:	f7fe fee6 	bl	8001860 <EncoderVelocity_Update>
		  //togo();
		  planning();
 8002a94:	f7ff fa4c 	bl	8001f30 <planning>
		  kalmanfilter();
 8002a98:	f7fe ff82 	bl	80019a0 <kalmanfilter>
		  pid();
 8002a9c:	f7ff fdc4 	bl	8002628 <pid>
		  MotorDrive();
 8002aa0:	f000 f860 	bl	8002b64 <MotorDrive>
		}
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002aac:	20000380 	.word	0x20000380
 8002ab0:	200000b8 	.word	0x200000b8
 8002ab4:	200001f4 	.word	0x200001f4

08002ab8 <micros>:

uint64_t micros()
{
 8002ab8:	b4b0      	push	{r4, r5, r7}
 8002aba:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <micros+0x2c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <micros+0x30>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	1884      	adds	r4, r0, r2
 8002ad0:	eb41 0503 	adc.w	r5, r1, r3
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	462b      	mov	r3, r5
}
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bcb0      	pop	{r4, r5, r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000380 	.word	0x20000380
 8002ae8:	200000b8 	.word	0x200000b8

08002aec <MicroCheck>:

void MicroCheck()
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	if (micros() - LEDTimeStamp >= 1000000) //1000000us = 1s = 1Hz for Half
 8002af0:	f7ff ffe2 	bl	8002ab8 <micros>
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MicroCheck+0x3c>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	1a84      	subs	r4, r0, r2
 8002afc:	eb61 0503 	sbc.w	r5, r1, r3
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <MicroCheck+0x40>)
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	42ab      	cmp	r3, r5
 8002b08:	bf08      	it	eq
 8002b0a:	42a2      	cmpeq	r2, r4
 8002b0c:	d20a      	bcs.n	8002b24 <MicroCheck+0x38>
	{
		LEDTimeStamp = micros();
 8002b0e:	f7ff ffd3 	bl	8002ab8 <micros>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <MicroCheck+0x3c>)
 8002b18:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b1c:	2120      	movs	r1, #32
 8002b1e:	4804      	ldr	r0, [pc, #16]	; (8002b30 <MicroCheck+0x44>)
 8002b20:	f001 faef 	bl	8004102 <HAL_GPIO_TogglePin>
	}
}
 8002b24:	bf00      	nop
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	200000c8 	.word	0x200000c8
 8002b2c:	000f423f 	.word	0x000f423f
 8002b30:	40020000 	.word	0x40020000

08002b34 <ProxiCheck>:

void ProxiCheck()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002b38:	2120      	movs	r1, #32
 8002b3a:	4808      	ldr	r0, [pc, #32]	; (8002b5c <ProxiCheck+0x28>)
 8002b3c:	f001 fab0 	bl	80040a0 <HAL_GPIO_ReadPin>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <ProxiCheck+0x2c>)
 8002b46:	701a      	strb	r2, [r3, #0]
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002b48:	2110      	movs	r1, #16
 8002b4a:	4804      	ldr	r0, [pc, #16]	; (8002b5c <ProxiCheck+0x28>)
 8002b4c:	f001 faa8 	bl	80040a0 <HAL_GPIO_ReadPin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <ProxiCheck+0x2c>)
 8002b56:	705a      	strb	r2, [r3, #1]
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	20000004 	.word	0x20000004

08002b64 <MotorDrive>:

void MotorDrive()
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MotorDrive+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db09      	blt.n	8002b84 <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MotorDrive+0x40>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MotorDrive+0x44>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MotorDrive+0x44>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 8002b82:	e009      	b.n	8002b98 <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MotorDrive+0x44>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <MotorDrive+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	425a      	negs	r2, r3
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <MotorDrive+0x44>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200000d0 	.word	0x200000d0
 8002ba8:	20000290 	.word	0x20000290

08002bac <SetHome>:

void SetHome()
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	PWMOut = -2500;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <SetHome+0x60>)
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <SetHome+0x64>)
 8002bb4:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8002bb6:	e001      	b.n	8002bbc <SetHome+0x10>
	{
		MotorDrive();
 8002bb8:	f7ff ffd4 	bl	8002b64 <MotorDrive>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8002bbc:	2110      	movs	r1, #16
 8002bbe:	4815      	ldr	r0, [pc, #84]	; (8002c14 <SetHome+0x68>)
 8002bc0:	f001 fa6e 	bl	80040a0 <HAL_GPIO_ReadPin>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d0f6      	beq.n	8002bb8 <SetHome+0xc>
	}

	PWMOut = -850;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <SetHome+0x60>)
 8002bcc:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <SetHome+0x6c>)
 8002bce:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8002bd0:	e001      	b.n	8002bd6 <SetHome+0x2a>
	{
		MotorDrive();
 8002bd2:	f7ff ffc7 	bl	8002b64 <MotorDrive>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	480e      	ldr	r0, [pc, #56]	; (8002c14 <SetHome+0x68>)
 8002bda:	f001 fa61 	bl	80040a0 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d0f6      	beq.n	8002bd2 <SetHome+0x26>
	}

	MotorDrive();
 8002be4:	f7ff ffbe 	bl	8002b64 <MotorDrive>
	HAL_Delay(200);
 8002be8:	20c8      	movs	r0, #200	; 0xc8
 8002bea:	f000 fc15 	bl	8003418 <HAL_Delay>

	PWMOut = 0;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <SetHome+0x60>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
	MotorDrive();
 8002bf4:	f7ff ffb6 	bl	8002b64 <MotorDrive>
	HAL_Delay(500);
 8002bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bfc:	f000 fc0c 	bl	8003418 <HAL_Delay>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002c00:	213c      	movs	r1, #60	; 0x3c
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <SetHome+0x70>)
 8002c04:	f004 fe24 	bl	8007850 <HAL_TIM_Encoder_Start>
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200000d0 	.word	0x200000d0
 8002c10:	fffff63c 	.word	0xfffff63c
 8002c14:	40020400 	.word	0x40020400
 8002c18:	fffffcae 	.word	0xfffffcae
 8002c1c:	20000338 	.word	0x20000338

08002c20 <Control>:

void Control()
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	Error_Position = Desired_Position - RobotArm_Position;
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <Control+0xb0>)
 8002c26:	ed93 7a00 	vldr	s14, [r3]
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <Control+0xb4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <Control+0xb8>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
	Error_Position_Sum += (Error_Position * dt);
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <Control+0xb8>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <Control+0xbc>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <Control+0xc0>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <Control+0xc0>)
 8002c56:	edc3 7a00 	vstr	s15, [r3]
	Error_Position_Div = (Error_Position - Error_Position_Old) / dt;
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <Control+0xb8>)
 8002c5c:	ed93 7a00 	vldr	s14, [r3]
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <Control+0xc4>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <Control+0xbc>)
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <Control+0xc8>)
 8002c76:	edc3 7a00 	vstr	s15, [r3]

	PWMOut = (K_P * Error_Position) + (K_I * Error_Position_Sum) + (K_D * Error_Position_Div);
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <Control+0xcc>)
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <Control+0xb8>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <Control+0xd0>)
 8002c8c:	edd3 6a00 	vldr	s13, [r3]
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <Control+0xc0>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <Control+0xd4>)
 8002ca0:	edd3 6a00 	vldr	s13, [r3]
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <Control+0xc8>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb6:	ee17 2a90 	vmov	r2, s15
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <Control+0xd8>)
 8002cbc:	601a      	str	r2, [r3, #0]

	Error_Position_Old = Error_Position;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <Control+0xb8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <Control+0xc4>)
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	200000d8 	.word	0x200000d8
 8002cd4:	200000d4 	.word	0x200000d4
 8002cd8:	200000e0 	.word	0x200000e0
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	200000e4 	.word	0x200000e4
 8002ce4:	200000ec 	.word	0x200000ec
 8002ce8:	200000e8 	.word	0x200000e8
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	200000f0 	.word	0x200000f0
 8002cf8:	200000d0 	.word	0x200000d0

08002cfc <I2C_Laser>:

void I2C_Laser()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, EndeffAddress, &LaserOpenCommand, 1, 500);
 8002d02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <I2C_Laser+0x60>)
 8002d0c:	2146      	movs	r1, #70	; 0x46
 8002d0e:	4814      	ldr	r0, [pc, #80]	; (8002d60 <I2C_Laser+0x64>)
 8002d10:	f001 fb56 	bl	80043c0 <HAL_I2C_Master_Transmit>
	for (int j=0; j<11; j++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	e018      	b.n	8002d4c <I2C_Laser+0x50>
	{
		HAL_I2C_Master_Transmit(&hi2c1, EndeffAddress, &LaserReadCommand, 1, 500);
 8002d1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2301      	movs	r3, #1
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <I2C_Laser+0x68>)
 8002d24:	2146      	movs	r1, #70	; 0x46
 8002d26:	480e      	ldr	r0, [pc, #56]	; (8002d60 <I2C_Laser+0x64>)
 8002d28:	f001 fb4a 	bl	80043c0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, EndeffAddress, &LaserStatus, 1, 500);
 8002d2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2301      	movs	r3, #1
 8002d34:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <I2C_Laser+0x6c>)
 8002d36:	2146      	movs	r1, #70	; 0x46
 8002d38:	4809      	ldr	r0, [pc, #36]	; (8002d60 <I2C_Laser+0x64>)
 8002d3a:	f001 fc3f 	bl	80045bc <HAL_I2C_Master_Receive>
		HAL_Delay(500);
 8002d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d42:	f000 fb69 	bl	8003418 <HAL_Delay>
	for (int j=0; j<11; j++)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b0a      	cmp	r3, #10
 8002d50:	dde3      	ble.n	8002d1a <I2C_Laser+0x1e>
	}
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000020 	.word	0x20000020
 8002d60:	2000023c 	.word	0x2000023c
 8002d64:	20000021 	.word	0x20000021
 8002d68:	20000022 	.word	0x20000022

08002d6c <I2C_Check>:

void I2C_Check()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	if(LaserOpenTrigger == 1)
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <I2C_Check+0x1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d104      	bne.n	8002d82 <I2C_Check+0x16>
	{
		I2C_Laser();
 8002d78:	f7ff ffc0 	bl	8002cfc <I2C_Laser>
		LaserOpenTrigger = 0;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <I2C_Check+0x1c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
	}
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000185 	.word	0x20000185

08002d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
}
 8002d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <Error_Handler+0x8>
	...

08002d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_MspInit+0x4c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_MspInit+0x4c>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_MspInit+0x4c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dd6:	2007      	movs	r0, #7
 8002dd8:	f000 fc12 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_I2C_MspInit+0xa4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d13b      	bne.n	8002e82 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2a:	2312      	movs	r3, #18
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e36:	2304      	movs	r3, #4
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4814      	ldr	r0, [pc, #80]	; (8002e94 <HAL_I2C_MspInit+0xac>)
 8002e42:	f000 ffa9 	bl	8003d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_I2C_MspInit+0xa8>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	201f      	movs	r0, #31
 8002e68:	f000 fbd5 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e6c:	201f      	movs	r0, #31
 8002e6e:	f000 fbee 	bl	800364e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2020      	movs	r0, #32
 8002e78:	f000 fbcd 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e7c:	2020      	movs	r0, #32
 8002e7e:	f000 fbe6 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40005400 	.word	0x40005400
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020400 	.word	0x40020400

08002e98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIM_Encoder_MspInit+0x84>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12c      	bne.n	8002f14 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002f10:	f000 ff42 	bl	8003d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f14:	bf00      	nop
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d116      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	201c      	movs	r0, #28
 8002f5c:	f000 fb5b 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f60:	201c      	movs	r0, #28
 8002f62:	f000 fb74 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f66:	e01a      	b.n	8002f9e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d115      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	201e      	movs	r0, #30
 8002f94:	f000 fb3f 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f98:	201e      	movs	r0, #30
 8002f9a:	f000 fb58 	bl	800364e <HAL_NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40000800 	.word	0x40000800

08002fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_TIM_PWM_MspInit+0x3c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10d      	bne.n	8002fde <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_TIM_PWM_MspInit+0x40>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_TIM_PWM_MspInit+0x40>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_TIM_PWM_MspInit+0x40>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_TIM_MspPostInit+0x68>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11d      	bne.n	8003052 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_TIM_MspPostInit+0x6c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_TIM_MspPostInit+0x6c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_TIM_MspPostInit+0x6c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003042:	2302      	movs	r3, #2
 8003044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_TIM_MspPostInit+0x70>)
 800304e:	f000 fea3 	bl	8003d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40000400 	.word	0x40000400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000

08003068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_UART_MspInit+0x150>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f040 8091 	bne.w	80031ae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_UART_MspInit+0x154>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a49      	ldr	r2, [pc, #292]	; (80031bc <HAL_UART_MspInit+0x154>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_UART_MspInit+0x154>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_UART_MspInit+0x154>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_UART_MspInit+0x154>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_UART_MspInit+0x154>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030c4:	230c      	movs	r3, #12
 80030c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d4:	2307      	movs	r3, #7
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	4838      	ldr	r0, [pc, #224]	; (80031c0 <HAL_UART_MspInit+0x158>)
 80030e0:	f000 fe5a 	bl	8003d98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 80030e6:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <HAL_UART_MspInit+0x160>)
 80030e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 80030ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 8003100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003104:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 8003114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003118:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003126:	4827      	ldr	r0, [pc, #156]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 8003128:	f000 faac 	bl	8003684 <HAL_DMA_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003132:	f7ff fe2b 	bl	8002d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
 800313c:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_UART_MspInit+0x15c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003144:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_UART_MspInit+0x168>)
 8003146:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_UART_MspInit+0x164>)
 800314a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800314e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003150:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_UART_MspInit+0x164>)
 800315e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003162:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_UART_MspInit+0x164>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_UART_MspInit+0x164>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003182:	4812      	ldr	r0, [pc, #72]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003184:	f000 fa7e 	bl	8003684 <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800318e:	f7ff fdfd 	bl	8002d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_UART_MspInit+0x164>)
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_UART_MspInit+0x164>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2026      	movs	r0, #38	; 0x26
 80031a4:	f000 fa37 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031a8:	2026      	movs	r0, #38	; 0x26
 80031aa:	f000 fa50 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031ae:	bf00      	nop
 80031b0:	3728      	adds	r7, #40	; 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	20000194 	.word	0x20000194
 80031c8:	40026088 	.word	0x40026088
 80031cc:	200002d8 	.word	0x200002d8
 80031d0:	400260a0 	.word	0x400260a0

080031d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <NMI_Handler+0x4>

080031da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <HardFault_Handler+0x4>

080031e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <MemManage_Handler+0x4>

080031e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <BusFault_Handler+0x4>

080031ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <UsageFault_Handler+0x4>

080031f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003220:	f000 f8da 	bl	80033d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <DMA1_Stream5_IRQHandler+0x10>)
 800322e:	f000 fb69 	bl	8003904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000194 	.word	0x20000194

0800323c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <DMA1_Stream6_IRQHandler+0x10>)
 8003242:	f000 fb5f 	bl	8003904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200002d8 	.word	0x200002d8

08003250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <TIM2_IRQHandler+0x10>)
 8003256:	f004 fb89 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000380 	.word	0x20000380

08003264 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <TIM4_IRQHandler+0x10>)
 800326a:	f004 fb7f 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200001f4 	.word	0x200001f4

08003278 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <I2C1_EV_IRQHandler+0x10>)
 800327e:	f001 fbc3 	bl	8004a08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000023c 	.word	0x2000023c

0800328c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <I2C1_ER_IRQHandler+0x10>)
 8003292:	f001 fd2a 	bl	8004cea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000023c 	.word	0x2000023c

080032a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <USART2_IRQHandler+0x10>)
 80032a6:	f005 f9b7 	bl	8008618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200003c8 	.word	0x200003c8

080032b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <SystemInit+0x28>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <SystemInit+0x28>)
 80032c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SystemInit+0x28>)
 80032ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ce:	609a      	str	r2, [r3, #8]
#endif
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032e6:	e003      	b.n	80032f0 <LoopCopyDataInit>

080032e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ee:	3104      	adds	r1, #4

080032f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032f0:	480b      	ldr	r0, [pc, #44]	; (8003320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032f8:	d3f6      	bcc.n	80032e8 <CopyDataInit>
  ldr  r2, =_sbss
 80032fa:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032fc:	e002      	b.n	8003304 <LoopFillZerobss>

080032fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003300:	f842 3b04 	str.w	r3, [r2], #4

08003304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003308:	d3f9      	bcc.n	80032fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800330a:	f7ff ffd3 	bl	80032b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330e:	f005 ffa3 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003312:	f7fd fea9 	bl	8001068 <main>
  bx  lr    
 8003316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800331c:	0800a2b0 	.word	0x0800a2b0
  ldr  r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003324:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8003328:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800332c:	20000410 	.word	0x20000410

08003330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003330:	e7fe      	b.n	8003330 <ADC_IRQHandler>
	...

08003334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_Init+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <HAL_Init+0x40>)
 800333e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_Init+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_Init+0x40>)
 800334a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_Init+0x40>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a07      	ldr	r2, [pc, #28]	; (8003374 <HAL_Init+0x40>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335c:	2003      	movs	r0, #3
 800335e:	f000 f94f 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003362:	2000      	movs	r0, #0
 8003364:	f000 f808 	bl	8003378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003368:	f7ff fd16 	bl	8002d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023c00 	.word	0x40023c00

08003378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_InitTick+0x54>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_InitTick+0x58>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f967 	bl	800366a <HAL_SYSTICK_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00e      	b.n	80033c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	d80a      	bhi.n	80033c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ac:	2200      	movs	r2, #0
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f000 f92f 	bl	8003616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <HAL_InitTick+0x5c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000024 	.word	0x20000024
 80033d0:	2000002c 	.word	0x2000002c
 80033d4:	20000028 	.word	0x20000028

080033d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_IncTick+0x20>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_IncTick+0x24>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_IncTick+0x24>)
 80033ea:	6013      	str	r3, [r2, #0]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	2000002c 	.word	0x2000002c
 80033fc:	2000040c 	.word	0x2000040c

08003400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return uwTick;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_GetTick+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	2000040c 	.word	0x2000040c

08003418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff ffee 	bl	8003400 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d005      	beq.n	800343e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_Delay+0x44>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800343e:	bf00      	nop
 8003440:	f7ff ffde 	bl	8003400 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d8f7      	bhi.n	8003440 <HAL_Delay+0x28>
  {
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000002c 	.word	0x2000002c

08003460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800348c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003492:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	60d3      	str	r3, [r2, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db0b      	blt.n	80034ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	4907      	ldr	r1, [pc, #28]	; (80034fc <__NVIC_EnableIRQ+0x38>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2001      	movs	r0, #1
 80034e6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	; (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
         );
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035cc:	d301      	bcc.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <SysTick_Config+0x40>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	210f      	movs	r1, #15
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f7ff ff8e 	bl	8003500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <SysTick_Config+0x40>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SysTick_Config+0x40>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff29 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff3e 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff8e 	bl	8003554 <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff5d 	bl	8003500 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff31 	bl	80034c4 <__NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ffa2 	bl	80035bc <SysTick_Config>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff feb6 	bl	8003400 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e099      	b.n	80037d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c0:	e00f      	b.n	80036e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c2:	f7ff fe9d 	bl	8003400 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d908      	bls.n	80036e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e078      	b.n	80037d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e8      	bne.n	80036c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_DMA_Init+0x158>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b04      	cmp	r3, #4
 800373a:	d107      	bne.n	800374c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4313      	orrs	r3, r2
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b04      	cmp	r3, #4
 8003774:	d117      	bne.n	80037a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa89 	bl	8003ca0 <DMA_CheckFifoParam>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2240      	movs	r2, #64	; 0x40
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037a2:	2301      	movs	r3, #1
 80037a4:	e016      	b.n	80037d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa40 	bl	8003c34 <DMA_CalcBaseAndBitshift>
 80037b4:	4603      	mov	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	223f      	movs	r2, #63	; 0x3f
 80037be:	409a      	lsls	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	f010803f 	.word	0xf010803f

080037e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037ee:	f7ff fe07 	bl	8003400 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d008      	beq.n	8003812 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e052      	b.n	80038b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0216 	bic.w	r2, r2, #22
 8003820:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_DMA_Abort+0x62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0208 	bic.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003862:	e013      	b.n	800388c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003864:	f7ff fdcc 	bl	8003400 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b05      	cmp	r3, #5
 8003870:	d90c      	bls.n	800388c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2203      	movs	r2, #3
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e015      	b.n	80038b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e4      	bne.n	8003864 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	223f      	movs	r2, #63	; 0x3f
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d004      	beq.n	80038de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e00c      	b.n	80038f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2205      	movs	r2, #5
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003910:	4b92      	ldr	r3, [pc, #584]	; (8003b5c <HAL_DMA_IRQHandler+0x258>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a92      	ldr	r2, [pc, #584]	; (8003b60 <HAL_DMA_IRQHandler+0x25c>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	0a9b      	lsrs	r3, r3, #10
 800391c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	2208      	movs	r2, #8
 8003930:	409a      	lsls	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01a      	beq.n	8003970 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2208      	movs	r2, #8
 800395e:	409a      	lsls	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2201      	movs	r2, #1
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	2204      	movs	r2, #4
 80039ac:	409a      	lsls	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d012      	beq.n	80039dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2204      	movs	r2, #4
 80039ca:	409a      	lsls	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2210      	movs	r2, #16
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d043      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03c      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2210      	movs	r2, #16
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d024      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
 8003a32:	e01f      	b.n	8003a74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
 8003a44:	e016      	b.n	8003a74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d107      	bne.n	8003a64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0208 	bic.w	r2, r2, #8
 8003a62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	2220      	movs	r2, #32
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 808e 	beq.w	8003ba2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d136      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0216 	bic.w	r2, r2, #22
 8003abc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003acc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_DMA_IRQHandler+0x1da>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0208 	bic.w	r2, r2, #8
 8003aec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	409a      	lsls	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
        }
        return;
 8003b1a:	e078      	b.n	8003c0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01c      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d030      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
 8003b48:	e02b      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e022      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x29e>
 8003b5c:	20000024 	.word	0x20000024
 8003b60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0210 	bic.w	r2, r2, #16
 8003b80:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d032      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2205      	movs	r2, #5
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d307      	bcc.n	8003bea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f2      	bne.n	8003bce <HAL_DMA_IRQHandler+0x2ca>
 8003be8:	e000      	b.n	8003bec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e000      	b.n	8003c10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c0e:	bf00      	nop
    }
  }
}
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c26:	b2db      	uxtb	r3, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3b10      	subs	r3, #16
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <DMA_CalcBaseAndBitshift+0x64>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <DMA_CalcBaseAndBitshift+0x68>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d909      	bls.n	8003c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	659a      	str	r2, [r3, #88]	; 0x58
 8003c74:	e007      	b.n	8003c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	aaaaaaab 	.word	0xaaaaaaab
 8003c9c:	0800a250 	.word	0x0800a250

08003ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11f      	bne.n	8003cfa <DMA_CheckFifoParam+0x5a>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d856      	bhi.n	8003d6e <DMA_CheckFifoParam+0xce>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <DMA_CheckFifoParam+0x28>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ceb 	.word	0x08003ceb
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003d6f 	.word	0x08003d6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d046      	beq.n	8003d72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce8:	e043      	b.n	8003d72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf2:	d140      	bne.n	8003d76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e03d      	b.n	8003d76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d121      	bne.n	8003d48 <DMA_CheckFifoParam+0xa8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d837      	bhi.n	8003d7a <DMA_CheckFifoParam+0xda>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <DMA_CheckFifoParam+0x70>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d27 	.word	0x08003d27
 8003d18:	08003d21 	.word	0x08003d21
 8003d1c:	08003d39 	.word	0x08003d39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e030      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d025      	beq.n	8003d7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d36:	e022      	b.n	8003d7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d40:	d11f      	bne.n	8003d82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d46:	e01c      	b.n	8003d82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d903      	bls.n	8003d56 <DMA_CheckFifoParam+0xb6>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d003      	beq.n	8003d5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d54:	e018      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5a:	e015      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6c:	e00b      	b.n	8003d86 <DMA_CheckFifoParam+0xe6>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e00a      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
 8003d74:	e008      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e006      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e004      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
    }
  } 
  
  return status; 
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop

08003d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e159      	b.n	8004068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f040 8148 	bne.w	8004062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d005      	beq.n	8003dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d130      	bne.n	8003e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	2203      	movs	r2, #3
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e20:	2201      	movs	r2, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 0201 	and.w	r2, r3, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d017      	beq.n	8003e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	2203      	movs	r2, #3
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d123      	bne.n	8003edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	220f      	movs	r2, #15
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3208      	adds	r2, #8
 8003ed6:	69b9      	ldr	r1, [r7, #24]
 8003ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0203 	and.w	r2, r3, #3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a2 	beq.w	8004062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b57      	ldr	r3, [pc, #348]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_GPIO_Init+0x2e8>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f3a:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_GPIO_Init+0x2ec>)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	3302      	adds	r3, #2
 8003f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a49      	ldr	r2, [pc, #292]	; (8004088 <HAL_GPIO_Init+0x2f0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d019      	beq.n	8003f9a <HAL_GPIO_Init+0x202>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a48      	ldr	r2, [pc, #288]	; (800408c <HAL_GPIO_Init+0x2f4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_GPIO_Init+0x1fe>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a47      	ldr	r2, [pc, #284]	; (8004090 <HAL_GPIO_Init+0x2f8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_GPIO_Init+0x1fa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a46      	ldr	r2, [pc, #280]	; (8004094 <HAL_GPIO_Init+0x2fc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <HAL_GPIO_Init+0x1f6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a45      	ldr	r2, [pc, #276]	; (8004098 <HAL_GPIO_Init+0x300>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_GPIO_Init+0x1f2>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e008      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f8a:	2307      	movs	r3, #7
 8003f8c:	e006      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e004      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_GPIO_Init+0x204>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	f002 0203 	and.w	r2, r2, #3
 8003fa2:	0092      	lsls	r2, r2, #2
 8003fa4:	4093      	lsls	r3, r2
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fac:	4935      	ldr	r1, [pc, #212]	; (8004084 <HAL_GPIO_Init+0x2ec>)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fde:	4a2f      	ldr	r2, [pc, #188]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_GPIO_Init+0x304>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <HAL_GPIO_Init+0x304>)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_GPIO_Init+0x304>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_GPIO_Init+0x304>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_GPIO_Init+0x304>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_GPIO_Init+0x304>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	f67f aea2 	bls.w	8003db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	40013800 	.word	0x40013800
 8004088:	40020000 	.word	0x40020000
 800408c:	40020400 	.word	0x40020400
 8004090:	40020800 	.word	0x40020800
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40021000 	.word	0x40021000
 800409c:	40013c00 	.word	0x40013c00

080040a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e001      	b.n	80040c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e0:	787b      	ldrb	r3, [r7, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040ec:	e003      	b.n	80040f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	041a      	lsls	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	619a      	str	r2, [r3, #24]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43d9      	mvns	r1, r3
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	400b      	ands	r3, r1
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	619a      	str	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e12b      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe fe42 	bl	8002de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	; 0x24
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800419c:	f003 f87e 	bl	800729c <HAL_RCC_GetPCLK1Freq>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a81      	ldr	r2, [pc, #516]	; (80043ac <HAL_I2C_Init+0x274>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d807      	bhi.n	80041bc <HAL_I2C_Init+0x84>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a80      	ldr	r2, [pc, #512]	; (80043b0 <HAL_I2C_Init+0x278>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e006      	b.n	80041ca <HAL_I2C_Init+0x92>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <HAL_I2C_Init+0x27c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bf94      	ite	ls
 80041c4:	2301      	movls	r3, #1
 80041c6:	2300      	movhi	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0e7      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a78      	ldr	r2, [pc, #480]	; (80043b8 <HAL_I2C_Init+0x280>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_I2C_Init+0x274>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d802      	bhi.n	800420c <HAL_I2C_Init+0xd4>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	e009      	b.n	8004220 <HAL_I2C_Init+0xe8>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	4a69      	ldr	r2, [pc, #420]	; (80043bc <HAL_I2C_Init+0x284>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	3301      	adds	r3, #1
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	495c      	ldr	r1, [pc, #368]	; (80043ac <HAL_I2C_Init+0x274>)
 800423c:	428b      	cmp	r3, r1
 800423e:	d819      	bhi.n	8004274 <HAL_I2C_Init+0x13c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e59      	subs	r1, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004254:	400b      	ands	r3, r1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_I2C_Init+0x138>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1e59      	subs	r1, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fbb1 f3f3 	udiv	r3, r1, r3
 8004268:	3301      	adds	r3, #1
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	e051      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004270:	2304      	movs	r3, #4
 8004272:	e04f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d111      	bne.n	80042a0 <HAL_I2C_Init+0x168>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e58      	subs	r0, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	440b      	add	r3, r1
 800428a:	fbb0 f3f3 	udiv	r3, r0, r3
 800428e:	3301      	adds	r3, #1
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e012      	b.n	80042c6 <HAL_I2C_Init+0x18e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	0099      	lsls	r1, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Init+0x196>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_I2C_Init+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e58      	subs	r0, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	440b      	add	r3, r1
 80042e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6809      	ldr	r1, [r1, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6911      	ldr	r1, [r2, #16]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	000186a0 	.word	0x000186a0
 80043b0:	001e847f 	.word	0x001e847f
 80043b4:	003d08ff 	.word	0x003d08ff
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	461a      	mov	r2, r3
 80043cc:	460b      	mov	r3, r1
 80043ce:	817b      	strh	r3, [r7, #10]
 80043d0:	4613      	mov	r3, r2
 80043d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff f814 	bl	8003400 <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	f040 80e0 	bne.w	80045a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	4970      	ldr	r1, [pc, #448]	; (80045b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f002 f8dc 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
 8004400:	e0d3      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2C_Master_Transmit+0x50>
 800440c:	2302      	movs	r3, #2
 800440e:	e0cc      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d007      	beq.n	8004436 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2221      	movs	r2, #33	; 0x21
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2210      	movs	r2, #16
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	893a      	ldrh	r2, [r7, #8]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a50      	ldr	r2, [pc, #320]	; (80045b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004478:	8979      	ldrh	r1, [r7, #10]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 fe9e 	bl	80061c0 <I2C_MasterRequestWrite>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e08d      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044a4:	e066      	b.n	8004574 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f002 f956 	bl	800675c <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e06b      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d11b      	bne.n	8004548 <HAL_I2C_Master_Transmit+0x188>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	d017      	beq.n	8004548 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	6a39      	ldr	r1, [r7, #32]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f002 f946 	bl	80067de <I2C_WaitOnBTFFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2b04      	cmp	r3, #4
 800455e:	d107      	bne.n	8004570 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e01a      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d194      	bne.n	80044a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	00100002 	.word	0x00100002
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	461a      	mov	r2, r3
 80045c8:	460b      	mov	r3, r1
 80045ca:	817b      	strh	r3, [r7, #10]
 80045cc:	4613      	mov	r3, r2
 80045ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d0:	f7fe ff16 	bl	8003400 <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	f040 820b 	bne.w	80049fa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2319      	movs	r3, #25
 80045ea:	2201      	movs	r2, #1
 80045ec:	497c      	ldr	r1, [pc, #496]	; (80047e0 <HAL_I2C_Master_Receive+0x224>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f001 ffde 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	e1fe      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_I2C_Master_Receive+0x50>
 8004608:	2302      	movs	r3, #2
 800460a:	e1f7      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d007      	beq.n	8004632 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2222      	movs	r2, #34	; 0x22
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2210      	movs	r2, #16
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	893a      	ldrh	r2, [r7, #8]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <HAL_I2C_Master_Receive+0x228>)
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004674:	8979      	ldrh	r1, [r7, #10]
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f001 fe22 	bl	80062c4 <I2C_MasterRequestRead>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e1b8      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d113      	bne.n	80046ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	623b      	str	r3, [r7, #32]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e18c      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d11b      	bne.n	80046fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e16c      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d11b      	bne.n	800473a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	e14c      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004760:	e138      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	2b03      	cmp	r3, #3
 8004768:	f200 80f1 	bhi.w	800494e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b01      	cmp	r3, #1
 8004772:	d123      	bne.n	80047bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f002 f8a3 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e139      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ba:	e10b      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d14e      	bne.n	8004862 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	2200      	movs	r2, #0
 80047cc:	4906      	ldr	r1, [pc, #24]	; (80047e8 <HAL_I2C_Master_Receive+0x22c>)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f001 feee 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e10e      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
 80047de:	bf00      	nop
 80047e0:	00100002 	.word	0x00100002
 80047e4:	ffff0000 	.word	0xffff0000
 80047e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004860:	e0b8      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2200      	movs	r2, #0
 800486a:	4966      	ldr	r1, [pc, #408]	; (8004a04 <HAL_I2C_Master_Receive+0x448>)
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 fe9f 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0bf      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	2200      	movs	r2, #0
 80048c6:	494f      	ldr	r1, [pc, #316]	; (8004a04 <HAL_I2C_Master_Receive+0x448>)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 fe71 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e091      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800494c:	e042      	b.n	80049d4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f001 ffb6 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e04c      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d118      	bne.n	80049d4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f aec2 	bne.w	8004762 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	; 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	00010004 	.word	0x00010004

08004a08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d003      	beq.n	8004a40 <HAL_I2C_EV_IRQHandler+0x38>
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	f040 80c1 	bne.w	8004bc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_I2C_EV_IRQHandler+0x6e>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a60:	d003      	beq.n	8004a6a <HAL_I2C_EV_IRQHandler+0x62>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a68:	d101      	bne.n	8004a6e <HAL_I2C_EV_IRQHandler+0x66>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x68>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f000 8132 	beq.w	8004cda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00c      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x92>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	0a5b      	lsrs	r3, r3, #9
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d006      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 ff9e 	bl	80069ce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fd79 	bl	800558a <I2C_Master_SB>
 8004a98:	e092      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	08db      	lsrs	r3, r3, #3
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_I2C_EV_IRQHandler+0xb2>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	0a5b      	lsrs	r3, r3, #9
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fdef 	bl	8005696 <I2C_Master_ADD10>
 8004ab8:	e082      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0xd2>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	0a5b      	lsrs	r3, r3, #9
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fe09 	bl	80056ea <I2C_Master_ADDR>
 8004ad8:	e072      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03b      	beq.n	8004b5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af4:	f000 80f3 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	09db      	lsrs	r3, r3, #7
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	0a9b      	lsrs	r3, r3, #10
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f9f3 	bl	8004f08 <I2C_MasterTransmit_TXE>
 8004b22:	e04d      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80d6 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80cf 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	2b21      	cmp	r3, #33	; 0x21
 8004b44:	d103      	bne.n	8004b4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa7a 	bl	8005040 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b4c:	e0c7      	b.n	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	f040 80c4 	bne.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fae8 	bl	800512c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b5c:	e0bf      	b.n	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6c:	f000 80b7 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00f      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x194>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x194>
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb5d 	bl	8005254 <I2C_MasterReceive_RXNE>
 8004b9a:	e011      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 809a 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	0a5b      	lsrs	r3, r3, #9
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8093 	beq.w	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fbfc 	bl	80053b6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bbe:	e08e      	b.n	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bc0:	e08d      	b.n	8004cde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	e007      	b.n	8004be4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_I2C_EV_IRQHandler+0x20e>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	0a5b      	lsrs	r3, r3, #9
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 ffba 	bl	8005b88 <I2C_Slave_ADDR>
 8004c14:	e066      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_I2C_EV_IRQHandler+0x22e>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	0a5b      	lsrs	r3, r3, #9
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fff4 	bl	8005c1c <I2C_Slave_STOPF>
 8004c34:	e056      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c36:	7bbb      	ldrb	r3, [r7, #14]
 8004c38:	2b21      	cmp	r3, #33	; 0x21
 8004c3a:	d002      	beq.n	8004c42 <HAL_I2C_EV_IRQHandler+0x23a>
 8004c3c:	7bbb      	ldrb	r3, [r7, #14]
 8004c3e:	2b29      	cmp	r3, #41	; 0x29
 8004c40:	d125      	bne.n	8004c8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	09db      	lsrs	r3, r3, #7
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00f      	beq.n	8004c6e <HAL_I2C_EV_IRQHandler+0x266>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	0a9b      	lsrs	r3, r3, #10
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_I2C_EV_IRQHandler+0x266>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fed0 	bl	8005a0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c6c:	e039      	b.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d033      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02d      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fefd 	bl	8005a86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c8c:	e029      	b.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00f      	beq.n	8004cba <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0a9b      	lsrs	r3, r3, #10
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 ff08 	bl	8005ac8 <I2C_SlaveReceive_RXNE>
 8004cb8:	e014      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	0a5b      	lsrs	r3, r3, #9
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ff36 	bl	8005b44 <I2C_SlaveReceive_BTF>
 8004cd8:	e004      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b08a      	sub	sp, #40	; 0x28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	0a5b      	lsrs	r3, r3, #9
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <HAL_I2C_ER_IRQHandler+0x78>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	0a9b      	lsrs	r3, r3, #10
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03f      	beq.n	8004dee <HAL_I2C_ER_IRQHandler+0x104>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d039      	beq.n	8004dee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d7a:	7efb      	ldrb	r3, [r7, #27]
 8004d7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d94:	7ebb      	ldrb	r3, [r7, #26]
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d112      	bne.n	8004dc0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2b21      	cmp	r3, #33	; 0x21
 8004da4:	d008      	beq.n	8004db8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b29      	cmp	r3, #41	; 0x29
 8004daa:	d005      	beq.n	8004db8 <HAL_I2C_ER_IRQHandler+0xce>
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	2b28      	cmp	r3, #40	; 0x28
 8004db0:	d106      	bne.n	8004dc0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b21      	cmp	r3, #33	; 0x21
 8004db6:	d103      	bne.n	8004dc0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 f85f 	bl	8005e7c <I2C_Slave_AF>
 8004dbe:	e016      	b.n	8004dee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dd2:	7efb      	ldrb	r3, [r7, #27]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d002      	beq.n	8004dde <HAL_I2C_ER_IRQHandler+0xf4>
 8004dd8:	7efb      	ldrb	r3, [r7, #27]
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	0adb      	lsrs	r3, r3, #11
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00e      	beq.n	8004e18 <HAL_I2C_ER_IRQHandler+0x12e>
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f043 0308 	orr.w	r3, r3, #8
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 f896 	bl	8005f5c <I2C_ITError>
  }
}
 8004e30:	bf00      	nop
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
 8004e94:	4613      	mov	r3, r2
 8004e96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d150      	bne.n	8004fd0 <I2C_MasterTransmit_TXE+0xc8>
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d14d      	bne.n	8004fd0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d01d      	beq.n	8004f76 <I2C_MasterTransmit_TXE+0x6e>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d01a      	beq.n	8004f76 <I2C_MasterTransmit_TXE+0x6e>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f46:	d016      	beq.n	8004f76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2211      	movs	r2, #17
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ff62 	bl	8004e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f74:	e060      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d107      	bne.n	8004fc0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff7d 	bl	8004eb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fbe:	e03b      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff35 	bl	8004e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fce:	e033      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b21      	cmp	r3, #33	; 0x21
 8004fd4:	d005      	beq.n	8004fe2 <I2C_MasterTransmit_TXE+0xda>
 8004fd6:	7bbb      	ldrb	r3, [r7, #14]
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d12d      	bne.n	8005038 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b22      	cmp	r3, #34	; 0x22
 8004fe0:	d12a      	bne.n	8005038 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ffc:	e01c      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d103      	bne.n	8005012 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f88e 	bl	800512c <I2C_MemoryTransmit_TXE_BTF>
}
 8005010:	e012      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005036:	e7ff      	b.n	8005038 <I2C_MasterTransmit_TXE+0x130>
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b21      	cmp	r3, #33	; 0x21
 8005058:	d164      	bne.n	8005124 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005088:	e04c      	b.n	8005124 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d01d      	beq.n	80050cc <I2C_MasterTransmit_BTF+0x8c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b20      	cmp	r3, #32
 8005094:	d01a      	beq.n	80050cc <I2C_MasterTransmit_BTF+0x8c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800509c:	d016      	beq.n	80050cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2211      	movs	r2, #17
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff feb7 	bl	8004e38 <HAL_I2C_MasterTxCpltCallback>
}
 80050ca:	e02b      	b.n	8005124 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d107      	bne.n	8005116 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fed2 	bl	8004eb8 <HAL_I2C_MemTxCpltCallback>
}
 8005114:	e006      	b.n	8005124 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe8a 	bl	8004e38 <HAL_I2C_MasterTxCpltCallback>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d10b      	bne.n	8005164 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	b2da      	uxtb	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005162:	e073      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005168:	b29b      	uxth	r3, r3
 800516a:	121b      	asrs	r3, r3, #8
 800516c:	b2da      	uxtb	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800517e:	e065      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10b      	bne.n	80051a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800519e:	e055      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d151      	bne.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b22      	cmp	r3, #34	; 0x22
 80051ac:	d10d      	bne.n	80051ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051c8:	e040      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b21      	cmp	r3, #33	; 0x21
 80051d8:	d112      	bne.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051fe:	e025      	b.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d120      	bne.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b21      	cmp	r3, #33	; 0x21
 800520e:	d11d      	bne.n	800524c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800521e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fe36 	bl	8004eb8 <HAL_I2C_MemTxCpltCallback>
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	f040 80a2 	bne.w	80053ae <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d921      	bls.n	80052bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	f040 8082 	bne.w	80053ae <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052ba:	e078      	b.n	80053ae <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d074      	beq.n	80053ae <I2C_MasterReceive_RXNE+0x15a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d002      	beq.n	80052d0 <I2C_MasterReceive_RXNE+0x7c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d16e      	bne.n	80053ae <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fac5 	bl	8006860 <I2C_WaitOnSTOPRequestThroughIT>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d142      	bne.n	8005362 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d10a      	bne.n	800534c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fdc1 	bl	8004ecc <HAL_I2C_MemRxCpltCallback>
}
 800534a:	e030      	b.n	80053ae <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2212      	movs	r2, #18
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fd76 	bl	8004e4c <HAL_I2C_MasterRxCpltCallback>
}
 8005360:	e025      	b.n	80053ae <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005370:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fd99 	bl	8004ee0 <HAL_I2C_ErrorCallback>
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d11b      	bne.n	8005406 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005404:	e0bd      	b.n	8005582 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b03      	cmp	r3, #3
 800540e:	d129      	bne.n	8005464 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00a      	beq.n	800543c <I2C_MasterReceive_BTF+0x86>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d007      	beq.n	800543c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005462:	e08e      	b.n	8005582 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d176      	bne.n	800555c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d002      	beq.n	800547a <I2C_MasterReceive_BTF+0xc4>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b10      	cmp	r3, #16
 8005478:	d108      	bne.n	800548c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e019      	b.n	80054c0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d002      	beq.n	8005498 <I2C_MasterReceive_BTF+0xe2>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d108      	bne.n	80054aa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e00a      	b.n	80054c0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d007      	beq.n	80054c0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800551a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d10a      	bne.n	8005546 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff fcc4 	bl	8004ecc <HAL_I2C_MemRxCpltCallback>
}
 8005544:	e01d      	b.n	8005582 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2212      	movs	r2, #18
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fc79 	bl	8004e4c <HAL_I2C_MasterRxCpltCallback>
}
 800555a:	e012      	b.n	8005582 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d117      	bne.n	80055ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055b8:	e067      	b.n	800568a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	611a      	str	r2, [r3, #16]
}
 80055cc:	e05d      	b.n	800568a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d6:	d133      	bne.n	8005640 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b21      	cmp	r3, #33	; 0x21
 80055e2:	d109      	bne.n	80055f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e008      	b.n	800560a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <I2C_Master_SB+0x92>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d108      	bne.n	800562e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d032      	beq.n	800568a <I2C_Master_SB+0x100>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02d      	beq.n	800568a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563c:	605a      	str	r2, [r3, #4]
}
 800563e:	e024      	b.n	800568a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10e      	bne.n	8005666 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	b29b      	uxth	r3, r3
 800564e:	11db      	asrs	r3, r3, #7
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0306 	and.w	r3, r3, #6
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f063 030f 	orn	r3, r3, #15
 800565c:	b2da      	uxtb	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]
}
 8005664:	e011      	b.n	800568a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10d      	bne.n	800568a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	b29b      	uxth	r3, r3
 8005674:	11db      	asrs	r3, r3, #7
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 0306 	and.w	r3, r3, #6
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f063 030e 	orn	r3, r3, #14
 8005682:	b2da      	uxtb	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <I2C_Master_ADD10+0x26>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <I2C_Master_ADD10+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056dc:	605a      	str	r2, [r3, #4]
  }
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b091      	sub	sp, #68	; 0x44
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b22      	cmp	r3, #34	; 0x22
 8005712:	f040 8169 	bne.w	80059e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <I2C_Master_ADDR+0x54>
 800571e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d10b      	bne.n	800573e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005726:	2300      	movs	r3, #0
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	e160      	b.n	8005a00 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11d      	bne.n	8005782 <I2C_Master_ADDR+0x98>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800574e:	d118      	bne.n	8005782 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005750:	2300      	movs	r3, #0
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005774:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	651a      	str	r2, [r3, #80]	; 0x50
 8005780:	e13e      	b.n	8005a00 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d113      	bne.n	80057b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578c:	2300      	movs	r3, #0
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e115      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	f040 808a 	bne.w	80058d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c6:	d137      	bne.n	8005838 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d113      	bne.n	8005810 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f8:	2300      	movs	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	e0e7      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e0d3      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2b08      	cmp	r3, #8
 800583c:	d02e      	beq.n	800589c <I2C_Master_ADDR+0x1b2>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b20      	cmp	r3, #32
 8005842:	d02b      	beq.n	800589c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	2b12      	cmp	r3, #18
 8005848:	d102      	bne.n	8005850 <I2C_Master_ADDR+0x166>
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b01      	cmp	r3, #1
 800584e:	d125      	bne.n	800589c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	2b04      	cmp	r3, #4
 8005854:	d00e      	beq.n	8005874 <I2C_Master_ADDR+0x18a>
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b02      	cmp	r3, #2
 800585a:	d00b      	beq.n	8005874 <I2C_Master_ADDR+0x18a>
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	2b10      	cmp	r3, #16
 8005860:	d008      	beq.n	8005874 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e007      	b.n	8005884 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005882:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	e0a1      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e085      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d14d      	bne.n	800597a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d016      	beq.n	8005912 <I2C_Master_ADDR+0x228>
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d013      	beq.n	8005912 <I2C_Master_ADDR+0x228>
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d010      	beq.n	8005912 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e007      	b.n	8005922 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005920:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005930:	d117      	bne.n	8005962 <I2C_Master_ADDR+0x278>
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005938:	d00b      	beq.n	8005952 <I2C_Master_ADDR+0x268>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b01      	cmp	r3, #1
 800593e:	d008      	beq.n	8005952 <I2C_Master_ADDR+0x268>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	2b08      	cmp	r3, #8
 8005944:	d005      	beq.n	8005952 <I2C_Master_ADDR+0x268>
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b10      	cmp	r3, #16
 800594a:	d002      	beq.n	8005952 <I2C_Master_ADDR+0x268>
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	2b20      	cmp	r3, #32
 8005950:	d107      	bne.n	8005962 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005960:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	e032      	b.n	80059e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005988:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005998:	d117      	bne.n	80059ca <I2C_Master_ADDR+0x2e0>
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059a0:	d00b      	beq.n	80059ba <I2C_Master_ADDR+0x2d0>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d008      	beq.n	80059ba <I2C_Master_ADDR+0x2d0>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d005      	beq.n	80059ba <I2C_Master_ADDR+0x2d0>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d002      	beq.n	80059ba <I2C_Master_ADDR+0x2d0>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d107      	bne.n	80059ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059e6:	e00b      	b.n	8005a00 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	e7ff      	b.n	8005a00 <I2C_Master_ADDR+0x316>
 8005a00:	bf00      	nop
 8005a02:	3744      	adds	r7, #68	; 0x44
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02b      	beq.n	8005a7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d114      	bne.n	8005a7e <I2C_SlaveTransmit_TXE+0x72>
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b29      	cmp	r3, #41	; 0x29
 8005a58:	d111      	bne.n	8005a7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2228      	movs	r2, #40	; 0x28
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f9f1 	bl	8004e60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d011      	beq.n	8005abc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02c      	beq.n	8005b3c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d114      	bne.n	8005b3c <I2C_SlaveReceive_RXNE+0x74>
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b2a      	cmp	r3, #42	; 0x2a
 8005b16:	d111      	bne.n	8005b3c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b26:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2222      	movs	r2, #34	; 0x22
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2228      	movs	r2, #40	; 0x28
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff f99c 	bl	8004e74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d012      	beq.n	8005b7c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ba2:	2b28      	cmp	r3, #40	; 0x28
 8005ba4:	d127      	bne.n	8005bf6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	81bb      	strh	r3, [r7, #12]
 8005bd8:	e002      	b.n	8005be0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005be8:	89ba      	ldrh	r2, [r7, #12]
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff f94a 	bl	8004e88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bf4:	e00e      	b.n	8005c14 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c78:	d172      	bne.n	8005d60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b22      	cmp	r3, #34	; 0x22
 8005c7e:	d002      	beq.n	8005c86 <I2C_Slave_STOPF+0x6a>
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b2a      	cmp	r3, #42	; 0x2a
 8005c84:	d135      	bne.n	8005cf2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f043 0204 	orr.w	r2, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd ffaa 	bl	8003c18 <HAL_DMA_GetState>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d049      	beq.n	8005d5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	4a69      	ldr	r2, [pc, #420]	; (8005e74 <I2C_Slave_STOPF+0x258>)
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fd fdf2 	bl	80038c0 <HAL_DMA_Abort_IT>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d03d      	beq.n	8005d5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cf0:	e035      	b.n	8005d5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd ff74 	bl	8003c18 <HAL_DMA_GetState>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d014      	beq.n	8005d60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	4a4e      	ldr	r2, [pc, #312]	; (8005e74 <I2C_Slave_STOPF+0x258>)
 8005d3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fd fdbc 	bl	80038c0 <HAL_DMA_Abort_IT>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	e000      	b.n	8005d60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d03e      	beq.n	8005de8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d112      	bne.n	8005d9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d112      	bne.n	8005dd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	f043 0204 	orr.w	r2, r3, #4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f8b3 	bl	8005f5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005df6:	e039      	b.n	8005e6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfc:	d109      	bne.n	8005e12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2228      	movs	r2, #40	; 0x28
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff f831 	bl	8004e74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b28      	cmp	r3, #40	; 0x28
 8005e1c:	d111      	bne.n	8005e42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <I2C_Slave_STOPF+0x25c>)
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff f832 	bl	8004ea4 <HAL_I2C_ListenCpltCallback>
}
 8005e40:	e014      	b.n	8005e6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	2b22      	cmp	r3, #34	; 0x22
 8005e48:	d002      	beq.n	8005e50 <I2C_Slave_STOPF+0x234>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b22      	cmp	r3, #34	; 0x22
 8005e4e:	d10d      	bne.n	8005e6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff f804 	bl	8004e74 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08006461 	.word	0x08006461
 8005e78:	ffff0000 	.word	0xffff0000

08005e7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d002      	beq.n	8005e9e <I2C_Slave_AF+0x22>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d129      	bne.n	8005ef2 <I2C_Slave_AF+0x76>
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b28      	cmp	r3, #40	; 0x28
 8005ea2:	d126      	bne.n	8005ef2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <I2C_Slave_AF+0xdc>)
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eb8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fe ffda 	bl	8004ea4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ef0:	e02e      	b.n	8005f50 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b21      	cmp	r3, #33	; 0x21
 8005ef6:	d126      	bne.n	8005f46 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <I2C_Slave_AF+0xdc>)
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2221      	movs	r2, #33	; 0x21
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fe ff8e 	bl	8004e60 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f44:	e004      	b.n	8005f50 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f4e:	615a      	str	r2, [r3, #20]
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	ffff0000 	.word	0xffff0000

08005f5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d002      	beq.n	8005f80 <I2C_ITError+0x24>
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d10a      	bne.n	8005f96 <I2C_ITError+0x3a>
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b22      	cmp	r3, #34	; 0x22
 8005f84:	d107      	bne.n	8005f96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f9c:	2b28      	cmp	r3, #40	; 0x28
 8005f9e:	d107      	bne.n	8005fb0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2228      	movs	r2, #40	; 0x28
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fae:	e015      	b.n	8005fdc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d00a      	beq.n	8005fd6 <I2C_ITError+0x7a>
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b60      	cmp	r3, #96	; 0x60
 8005fc4:	d007      	beq.n	8005fd6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	d162      	bne.n	80060b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ffa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	d020      	beq.n	800604c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <I2C_ITError+0x25c>)
 8006010:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd fc52 	bl	80038c0 <HAL_DMA_Abort_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8089 	beq.w	8006136 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006046:	4610      	mov	r0, r2
 8006048:	4798      	blx	r3
 800604a:	e074      	b.n	8006136 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	4a59      	ldr	r2, [pc, #356]	; (80061b8 <I2C_ITError+0x25c>)
 8006052:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	4618      	mov	r0, r3
 800605a:	f7fd fc31 	bl	80038c0 <HAL_DMA_Abort_IT>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d068      	beq.n	8006136 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d10b      	bne.n	800608a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3
 80060b0:	e041      	b.n	8006136 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b60      	cmp	r3, #96	; 0x60
 80060bc:	d125      	bne.n	800610a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10b      	bne.n	80060f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fe fef6 	bl	8004ef4 <HAL_I2C_AbortCpltCallback>
 8006108:	e015      	b.n	8006136 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d10b      	bne.n	8006130 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fe fed5 	bl	8004ee0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10e      	bne.n	8006164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b04      	cmp	r3, #4
 8006186:	d113      	bne.n	80061b0 <I2C_ITError+0x254>
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b28      	cmp	r3, #40	; 0x28
 800618c:	d110      	bne.n	80061b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <I2C_ITError+0x260>)
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fe fe7a 	bl	8004ea4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08006461 	.word	0x08006461
 80061bc:	ffff0000 	.word	0xffff0000

080061c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	607a      	str	r2, [r7, #4]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	460b      	mov	r3, r1
 80061ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d006      	beq.n	80061ea <I2C_MasterRequestWrite+0x2a>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d003      	beq.n	80061ea <I2C_MasterRequestWrite+0x2a>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061e8:	d108      	bne.n	80061fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e00b      	b.n	8006214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	2b12      	cmp	r3, #18
 8006202:	d107      	bne.n	8006214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f9c5 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d103      	bne.n	8006244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e035      	b.n	80062b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006250:	d108      	bne.n	8006264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	e01b      	b.n	800629c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006264:	897b      	ldrh	r3, [r7, #10]
 8006266:	11db      	asrs	r3, r3, #7
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0306 	and.w	r3, r3, #6
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f063 030f 	orn	r3, r3, #15
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	490e      	ldr	r1, [pc, #56]	; (80062bc <I2C_MasterRequestWrite+0xfc>)
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f9eb 	bl	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e010      	b.n	80062b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006292:	897b      	ldrh	r3, [r7, #10]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <I2C_MasterRequestWrite+0x100>)
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f9db 	bl	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	00010008 	.word	0x00010008
 80062c0:	00010002 	.word	0x00010002

080062c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	460b      	mov	r3, r1
 80062d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d006      	beq.n	80062fe <I2C_MasterRequestRead+0x3a>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d003      	beq.n	80062fe <I2C_MasterRequestRead+0x3a>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062fc:	d108      	bne.n	8006310 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e00b      	b.n	8006328 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	2b11      	cmp	r3, #17
 8006316:	d107      	bne.n	8006328 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f93b 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00d      	beq.n	800635c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634e:	d103      	bne.n	8006358 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e079      	b.n	8006450 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006364:	d108      	bne.n	8006378 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006366:	897b      	ldrh	r3, [r7, #10]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]
 8006376:	e05f      	b.n	8006438 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006378:	897b      	ldrh	r3, [r7, #10]
 800637a:	11db      	asrs	r3, r3, #7
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0306 	and.w	r3, r3, #6
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f063 030f 	orn	r3, r3, #15
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4930      	ldr	r1, [pc, #192]	; (8006458 <I2C_MasterRequestRead+0x194>)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f961 	bl	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e054      	b.n	8006450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063a6:	897b      	ldrh	r3, [r7, #10]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	4929      	ldr	r1, [pc, #164]	; (800645c <I2C_MasterRequestRead+0x198>)
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f951 	bl	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e044      	b.n	8006450 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f8d9 	bl	80065b0 <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00d      	beq.n	8006420 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006412:	d103      	bne.n	800641c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e017      	b.n	8006450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006420:	897b      	ldrh	r3, [r7, #10]
 8006422:	11db      	asrs	r3, r3, #7
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0306 	and.w	r3, r3, #6
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f063 030e 	orn	r3, r3, #14
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4907      	ldr	r1, [pc, #28]	; (800645c <I2C_MasterRequestRead+0x198>)
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f90d 	bl	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	00010008 	.word	0x00010008
 800645c:	00010002 	.word	0x00010002

08006460 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800647a:	4b4b      	ldr	r3, [pc, #300]	; (80065a8 <I2C_DMAAbort+0x148>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	4a4a      	ldr	r2, [pc, #296]	; (80065ac <I2C_DMAAbort+0x14c>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	0a1a      	lsrs	r2, r3, #8
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	00da      	lsls	r2, r3, #3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80064a6:	e00a      	b.n	80064be <I2C_DMAAbort+0x5e>
    }
    count--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064bc:	d0ea      	beq.n	8006494 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	2200      	movs	r2, #0
 80064cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	2200      	movs	r2, #0
 80064dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	2200      	movs	r2, #0
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0201 	bic.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b60      	cmp	r3, #96	; 0x60
 800652e:	d10e      	bne.n	800654e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006546:	6978      	ldr	r0, [r7, #20]
 8006548:	f7fe fcd4 	bl	8004ef4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800654c:	e027      	b.n	800659e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800654e:	7cfb      	ldrb	r3, [r7, #19]
 8006550:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006554:	2b28      	cmp	r3, #40	; 0x28
 8006556:	d117      	bne.n	8006588 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006576:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2228      	movs	r2, #40	; 0x28
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006586:	e007      	b.n	8006598 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f7fe fca1 	bl	8004ee0 <HAL_I2C_ErrorCallback>
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000024 	.word	0x20000024
 80065ac:	14f8b589 	.word	0x14f8b589

080065b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c0:	e025      	b.n	800660e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d021      	beq.n	800660e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ca:	f7fc ff19 	bl	8003400 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d116      	bne.n	800660e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e023      	b.n	8006656 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10d      	bne.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	43da      	mvns	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	e00c      	b.n	800664e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	43da      	mvns	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4013      	ands	r3, r2
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	429a      	cmp	r2, r3
 8006652:	d0b6      	beq.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800666c:	e051      	b.n	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d123      	bne.n	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0204 	orr.w	r2, r3, #4
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e046      	b.n	8006754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d021      	beq.n	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fc fe97 	bl	8003400 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d116      	bne.n	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e020      	b.n	8006754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d10c      	bne.n	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	43da      	mvns	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e00b      	b.n	800674e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	43da      	mvns	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4013      	ands	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d18d      	bne.n	800666e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006768:	e02d      	b.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f900 	bl	8006970 <I2C_IsAcknowledgeFailed>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e02d      	b.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d021      	beq.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fc fe3d 	bl	8003400 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e007      	b.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d0:	2b80      	cmp	r3, #128	; 0x80
 80067d2:	d1ca      	bne.n	800676a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067ea:	e02d      	b.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f8bf 	bl	8006970 <I2C_IsAcknowledgeFailed>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e02d      	b.n	8006858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d021      	beq.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006804:	f7fc fdfc 	bl	8003400 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d302      	bcc.n	800681a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d116      	bne.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e007      	b.n	8006858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d1ca      	bne.n	80067ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	0a1a      	lsrs	r2, r3, #8
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b01      	subs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e008      	b.n	80068b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ac:	d0e9      	beq.n	8006882 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000024 	.word	0x20000024
 80068c0:	14f8b589 	.word	0x14f8b589

080068c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d0:	e042      	b.n	8006958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d119      	bne.n	8006914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e029      	b.n	8006968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006914:	f7fc fd74 	bl	8003400 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d116      	bne.n	8006958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e007      	b.n	8006968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d1b5      	bne.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d11b      	bne.n	80069c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	f043 0204 	orr.w	r2, r3, #4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069de:	d103      	bne.n	80069e8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80069e6:	e007      	b.n	80069f8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069f0:	d102      	bne.n	80069f8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2208      	movs	r2, #8
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e264      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d075      	beq.n	8006b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a22:	4ba3      	ldr	r3, [pc, #652]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 030c 	and.w	r3, r3, #12
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d00c      	beq.n	8006a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a2e:	4ba0      	ldr	r3, [pc, #640]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d112      	bne.n	8006a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3a:	4b9d      	ldr	r3, [pc, #628]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a46:	d10b      	bne.n	8006a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a48:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05b      	beq.n	8006b0c <HAL_RCC_OscConfig+0x108>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d157      	bne.n	8006b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e23f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a68:	d106      	bne.n	8006a78 <HAL_RCC_OscConfig+0x74>
 8006a6a:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a90      	ldr	r2, [pc, #576]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e01d      	b.n	8006ab4 <HAL_RCC_OscConfig+0xb0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a80:	d10c      	bne.n	8006a9c <HAL_RCC_OscConfig+0x98>
 8006a82:	4b8b      	ldr	r3, [pc, #556]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a8a      	ldr	r2, [pc, #552]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4b88      	ldr	r3, [pc, #544]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a87      	ldr	r2, [pc, #540]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	e00b      	b.n	8006ab4 <HAL_RCC_OscConfig+0xb0>
 8006a9c:	4b84      	ldr	r3, [pc, #528]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a83      	ldr	r2, [pc, #524]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	4b81      	ldr	r3, [pc, #516]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a80      	ldr	r2, [pc, #512]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d013      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abc:	f7fc fca0 	bl	8003400 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac4:	f7fc fc9c 	bl	8003400 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b64      	cmp	r3, #100	; 0x64
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e204      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad6:	4b76      	ldr	r3, [pc, #472]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <HAL_RCC_OscConfig+0xc0>
 8006ae2:	e014      	b.n	8006b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fc fc8c 	bl	8003400 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aec:	f7fc fc88 	bl	8003400 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b64      	cmp	r3, #100	; 0x64
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e1f0      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006afe:	4b6c      	ldr	r3, [pc, #432]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f0      	bne.n	8006aec <HAL_RCC_OscConfig+0xe8>
 8006b0a:	e000      	b.n	8006b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d063      	beq.n	8006be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b1a:	4b65      	ldr	r3, [pc, #404]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b26:	4b62      	ldr	r3, [pc, #392]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d11c      	bne.n	8006b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b32:	4b5f      	ldr	r3, [pc, #380]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d116      	bne.n	8006b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b3e:	4b5c      	ldr	r3, [pc, #368]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_RCC_OscConfig+0x152>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d001      	beq.n	8006b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e1c4      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b56:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4952      	ldr	r1, [pc, #328]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6a:	e03a      	b.n	8006be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d020      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7a:	f7fc fc41 	bl	8003400 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b82:	f7fc fc3d 	bl	8003400 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e1a5      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b94:	4b46      	ldr	r3, [pc, #280]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0f0      	beq.n	8006b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba0:	4b43      	ldr	r3, [pc, #268]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4940      	ldr	r1, [pc, #256]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]
 8006bb4:	e015      	b.n	8006be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bb6:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fc fc20 	bl	8003400 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc4:	f7fc fc1c 	bl	8003400 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e184      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bd6:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d030      	beq.n	8006c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d016      	beq.n	8006c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bf6:	4b30      	ldr	r3, [pc, #192]	; (8006cb8 <HAL_RCC_OscConfig+0x2b4>)
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fc fc00 	bl	8003400 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c04:	f7fc fbfc 	bl	8003400 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e164      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x200>
 8006c22:	e015      	b.n	8006c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c24:	4b24      	ldr	r3, [pc, #144]	; (8006cb8 <HAL_RCC_OscConfig+0x2b4>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c2a:	f7fc fbe9 	bl	8003400 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c32:	f7fc fbe5 	bl	8003400 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e14d      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80a0 	beq.w	8006d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	4a0e      	ldr	r2, [pc, #56]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <HAL_RCC_OscConfig+0x2ac>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <HAL_RCC_OscConfig+0x2b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d121      	bne.n	8006cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_RCC_OscConfig+0x2b8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <HAL_RCC_OscConfig+0x2b8>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fc fbab 	bl	8003400 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cac:	e011      	b.n	8006cd2 <HAL_RCC_OscConfig+0x2ce>
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	42470000 	.word	0x42470000
 8006cb8:	42470e80 	.word	0x42470e80
 8006cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc0:	f7fc fb9e 	bl	8003400 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e106      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd2:	4b85      	ldr	r3, [pc, #532]	; (8006ee8 <HAL_RCC_OscConfig+0x4e4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x2f0>
 8006ce6:	4b81      	ldr	r3, [pc, #516]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	4a80      	ldr	r2, [pc, #512]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006cec:	f043 0301 	orr.w	r3, r3, #1
 8006cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf2:	e01c      	b.n	8006d2e <HAL_RCC_OscConfig+0x32a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d10c      	bne.n	8006d16 <HAL_RCC_OscConfig+0x312>
 8006cfc:	4b7b      	ldr	r3, [pc, #492]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	4a7a      	ldr	r2, [pc, #488]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d02:	f043 0304 	orr.w	r3, r3, #4
 8006d06:	6713      	str	r3, [r2, #112]	; 0x70
 8006d08:	4b78      	ldr	r3, [pc, #480]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	4a77      	ldr	r2, [pc, #476]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6713      	str	r3, [r2, #112]	; 0x70
 8006d14:	e00b      	b.n	8006d2e <HAL_RCC_OscConfig+0x32a>
 8006d16:	4b75      	ldr	r3, [pc, #468]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	4a74      	ldr	r2, [pc, #464]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	6713      	str	r3, [r2, #112]	; 0x70
 8006d22:	4b72      	ldr	r3, [pc, #456]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4a71      	ldr	r2, [pc, #452]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d28:	f023 0304 	bic.w	r3, r3, #4
 8006d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d015      	beq.n	8006d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d36:	f7fc fb63 	bl	8003400 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3c:	e00a      	b.n	8006d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3e:	f7fc fb5f 	bl	8003400 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e0c5      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d54:	4b65      	ldr	r3, [pc, #404]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0ee      	beq.n	8006d3e <HAL_RCC_OscConfig+0x33a>
 8006d60:	e014      	b.n	8006d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d62:	f7fc fb4d 	bl	8003400 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d68:	e00a      	b.n	8006d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d6a:	f7fc fb49 	bl	8003400 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e0af      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d80:	4b5a      	ldr	r3, [pc, #360]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1ee      	bne.n	8006d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d105      	bne.n	8006d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d92:	4b56      	ldr	r3, [pc, #344]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	4a55      	ldr	r2, [pc, #340]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 809b 	beq.w	8006ede <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006da8:	4b50      	ldr	r3, [pc, #320]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 030c 	and.w	r3, r3, #12
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d05c      	beq.n	8006e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d141      	bne.n	8006e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbc:	4b4c      	ldr	r3, [pc, #304]	; (8006ef0 <HAL_RCC_OscConfig+0x4ec>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc2:	f7fc fb1d 	bl	8003400 <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dca:	f7fc fb19 	bl	8003400 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e081      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ddc:	4b43      	ldr	r3, [pc, #268]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	019b      	lsls	r3, r3, #6
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	3b01      	subs	r3, #1
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	4937      	ldr	r1, [pc, #220]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <HAL_RCC_OscConfig+0x4ec>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fc faf2 	bl	8003400 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e20:	f7fc faee 	bl	8003400 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e056      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e32:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x41c>
 8006e3e:	e04e      	b.n	8006ede <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e40:	4b2b      	ldr	r3, [pc, #172]	; (8006ef0 <HAL_RCC_OscConfig+0x4ec>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e46:	f7fc fadb 	bl	8003400 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e4e:	f7fc fad7 	bl	8003400 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e03f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e60:	4b22      	ldr	r3, [pc, #136]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f0      	bne.n	8006e4e <HAL_RCC_OscConfig+0x44a>
 8006e6c:	e037      	b.n	8006ede <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e032      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <HAL_RCC_OscConfig+0x4e8>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d028      	beq.n	8006eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d121      	bne.n	8006eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d11a      	bne.n	8006eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eaa:	4013      	ands	r3, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d111      	bne.n	8006eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40007000 	.word	0x40007000
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	42470060 	.word	0x42470060

08006ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0cc      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f08:	4b68      	ldr	r3, [pc, #416]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90c      	bls.n	8006f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b65      	ldr	r3, [pc, #404]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b63      	ldr	r3, [pc, #396]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0b8      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d020      	beq.n	8006f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f48:	4b59      	ldr	r3, [pc, #356]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4a58      	ldr	r2, [pc, #352]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f60:	4b53      	ldr	r3, [pc, #332]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	4a52      	ldr	r2, [pc, #328]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f6c:	4b50      	ldr	r3, [pc, #320]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	494d      	ldr	r1, [pc, #308]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d044      	beq.n	8007014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f92:	4b47      	ldr	r3, [pc, #284]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d119      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e07f      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb2:	4b3f      	ldr	r3, [pc, #252]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e06f      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc2:	4b3b      	ldr	r3, [pc, #236]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e067      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fd2:	4b37      	ldr	r3, [pc, #220]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f023 0203 	bic.w	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4934      	ldr	r1, [pc, #208]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fe4:	f7fc fa0c 	bl	8003400 <HAL_GetTick>
 8006fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fea:	e00a      	b.n	8007002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fec:	f7fc fa08 	bl	8003400 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e04f      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007002:	4b2b      	ldr	r3, [pc, #172]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 020c 	and.w	r2, r3, #12
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	429a      	cmp	r2, r3
 8007012:	d1eb      	bne.n	8006fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d20c      	bcs.n	800703c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007022:	4b22      	ldr	r3, [pc, #136]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800702a:	4b20      	ldr	r3, [pc, #128]	; (80070ac <HAL_RCC_ClockConfig+0x1b8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d001      	beq.n	800703c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e032      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	4916      	ldr	r1, [pc, #88]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	4313      	orrs	r3, r2
 8007058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007066:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	490e      	ldr	r1, [pc, #56]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	4313      	orrs	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800707a:	f000 f821 	bl	80070c0 <HAL_RCC_GetSysClockFreq>
 800707e:	4602      	mov	r2, r0
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	091b      	lsrs	r3, r3, #4
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	490a      	ldr	r1, [pc, #40]	; (80070b4 <HAL_RCC_ClockConfig+0x1c0>)
 800708c:	5ccb      	ldrb	r3, [r1, r3]
 800708e:	fa22 f303 	lsr.w	r3, r2, r3
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <HAL_RCC_ClockConfig+0x1c8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7fc f96c 	bl	8003378 <HAL_InitTick>

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40023c00 	.word	0x40023c00
 80070b0:	40023800 	.word	0x40023800
 80070b4:	0800a238 	.word	0x0800a238
 80070b8:	20000024 	.word	0x20000024
 80070bc:	20000028 	.word	0x20000028

080070c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	2300      	movs	r3, #0
 80070d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070d8:	4b67      	ldr	r3, [pc, #412]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 030c 	and.w	r3, r3, #12
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d00d      	beq.n	8007100 <HAL_RCC_GetSysClockFreq+0x40>
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	f200 80bd 	bhi.w	8007264 <HAL_RCC_GetSysClockFreq+0x1a4>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_RCC_GetSysClockFreq+0x34>
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d003      	beq.n	80070fa <HAL_RCC_GetSysClockFreq+0x3a>
 80070f2:	e0b7      	b.n	8007264 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070f4:	4b61      	ldr	r3, [pc, #388]	; (800727c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070f6:	60bb      	str	r3, [r7, #8]
       break;
 80070f8:	e0b7      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070fa:	4b61      	ldr	r3, [pc, #388]	; (8007280 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070fc:	60bb      	str	r3, [r7, #8]
      break;
 80070fe:	e0b4      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007100:	4b5d      	ldr	r3, [pc, #372]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007108:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800710a:	4b5b      	ldr	r3, [pc, #364]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04d      	beq.n	80071b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007116:	4b58      	ldr	r3, [pc, #352]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	099b      	lsrs	r3, r3, #6
 800711c:	461a      	mov	r2, r3
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	ea02 0800 	and.w	r8, r2, r0
 800712e:	ea03 0901 	and.w	r9, r3, r1
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	014b      	lsls	r3, r1, #5
 8007140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007144:	0142      	lsls	r2, r0, #5
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	ebb0 0008 	subs.w	r0, r0, r8
 800714e:	eb61 0109 	sbc.w	r1, r1, r9
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	018b      	lsls	r3, r1, #6
 800715c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007160:	0182      	lsls	r2, r0, #6
 8007162:	1a12      	subs	r2, r2, r0
 8007164:	eb63 0301 	sbc.w	r3, r3, r1
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	00d9      	lsls	r1, r3, #3
 8007172:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007176:	00d0      	lsls	r0, r2, #3
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	eb12 0208 	adds.w	r2, r2, r8
 8007180:	eb43 0309 	adc.w	r3, r3, r9
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	0259      	lsls	r1, r3, #9
 800718e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007192:	0250      	lsls	r0, r2, #9
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4610      	mov	r0, r2
 800719a:	4619      	mov	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	461a      	mov	r2, r3
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	f7f9 fde2 	bl	8000d6c <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e04a      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b2:	4b31      	ldr	r3, [pc, #196]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	461a      	mov	r2, r3
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071c2:	f04f 0100 	mov.w	r1, #0
 80071c6:	ea02 0400 	and.w	r4, r2, r0
 80071ca:	ea03 0501 	and.w	r5, r3, r1
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	014b      	lsls	r3, r1, #5
 80071dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071e0:	0142      	lsls	r2, r0, #5
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	1b00      	subs	r0, r0, r4
 80071e8:	eb61 0105 	sbc.w	r1, r1, r5
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	018b      	lsls	r3, r1, #6
 80071f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071fa:	0182      	lsls	r2, r0, #6
 80071fc:	1a12      	subs	r2, r2, r0
 80071fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f04f 0100 	mov.w	r1, #0
 800720a:	00d9      	lsls	r1, r3, #3
 800720c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007210:	00d0      	lsls	r0, r2, #3
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	1912      	adds	r2, r2, r4
 8007218:	eb45 0303 	adc.w	r3, r5, r3
 800721c:	f04f 0000 	mov.w	r0, #0
 8007220:	f04f 0100 	mov.w	r1, #0
 8007224:	0299      	lsls	r1, r3, #10
 8007226:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800722a:	0290      	lsls	r0, r2, #10
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4610      	mov	r0, r2
 8007232:	4619      	mov	r1, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	461a      	mov	r2, r3
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	f7f9 fd96 	bl	8000d6c <__aeabi_uldivmod>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4613      	mov	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	0c1b      	lsrs	r3, r3, #16
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	3301      	adds	r3, #1
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	60bb      	str	r3, [r7, #8]
      break;
 8007262:	e002      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007266:	60bb      	str	r3, [r7, #8]
      break;
 8007268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800726a:	68bb      	ldr	r3, [r7, #8]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	00f42400 	.word	0x00f42400
 8007280:	007a1200 	.word	0x007a1200

08007284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <HAL_RCC_GetHCLKFreq+0x14>)
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	4618      	mov	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000024 	.word	0x20000024

0800729c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072a0:	f7ff fff0 	bl	8007284 <HAL_RCC_GetHCLKFreq>
 80072a4:	4602      	mov	r2, r0
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	0a9b      	lsrs	r3, r3, #10
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	4903      	ldr	r1, [pc, #12]	; (80072c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072b2:	5ccb      	ldrb	r3, [r1, r3]
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40023800 	.word	0x40023800
 80072c0:	0800a248 	.word	0x0800a248

080072c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072c8:	f7ff ffdc 	bl	8007284 <HAL_RCC_GetHCLKFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	0b5b      	lsrs	r3, r3, #13
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	4903      	ldr	r1, [pc, #12]	; (80072e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40023800 	.word	0x40023800
 80072e8:	0800a248 	.word	0x0800a248

080072ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e041      	b.n	8007382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb fe08 	bl	8002f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	4619      	mov	r1, r3
 800732a:	4610      	mov	r0, r2
 800732c:	f000 fdd8 	bl	8007ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d001      	beq.n	80073a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e03c      	b.n	800741e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1e      	ldr	r2, [pc, #120]	; (800742c <HAL_TIM_Base_Start+0xa0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <HAL_TIM_Base_Start+0x5c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073be:	d013      	beq.n	80073e8 <HAL_TIM_Base_Start+0x5c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1a      	ldr	r2, [pc, #104]	; (8007430 <HAL_TIM_Base_Start+0xa4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <HAL_TIM_Base_Start+0x5c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a19      	ldr	r2, [pc, #100]	; (8007434 <HAL_TIM_Base_Start+0xa8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_TIM_Base_Start+0x5c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a17      	ldr	r2, [pc, #92]	; (8007438 <HAL_TIM_Base_Start+0xac>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIM_Base_Start+0x5c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a16      	ldr	r2, [pc, #88]	; (800743c <HAL_TIM_Base_Start+0xb0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d111      	bne.n	800740c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d010      	beq.n	800741c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740a:	e007      	b.n	800741c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40014000 	.word	0x40014000

08007440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d001      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e044      	b.n	80074e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d018      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x6c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007482:	d013      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x6c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00e      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x6c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d009      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x6c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a17      	ldr	r2, [pc, #92]	; (80074fc <HAL_TIM_Base_Start_IT+0xbc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d004      	beq.n	80074ac <HAL_TIM_Base_Start_IT+0x6c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a16      	ldr	r2, [pc, #88]	; (8007500 <HAL_TIM_Base_Start_IT+0xc0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d111      	bne.n	80074d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d010      	beq.n	80074e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ce:	e007      	b.n	80074e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40014000 	.word	0x40014000

08007504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e041      	b.n	800759a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fb fd40 	bl	8002fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f000 fccc 	bl	8007ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x24>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e022      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x3e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e015      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x58>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e008      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	bf14      	ite	ne
 8007608:	2301      	movne	r3, #1
 800760a:	2300      	moveq	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e068      	b.n	80076e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0x82>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	e013      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0x92>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007634:	e00b      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007644:	e003      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fee8 	bl	800842c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <HAL_TIM_PWM_Start+0x14c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d107      	bne.n	8007676 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_TIM_PWM_Start+0x14c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d013      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <HAL_TIM_PWM_Start+0x150>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <HAL_TIM_PWM_Start+0x154>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a16      	ldr	r2, [pc, #88]	; (80076fc <HAL_TIM_PWM_Start+0x158>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <HAL_TIM_PWM_Start+0x15c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b06      	cmp	r3, #6
 80076c2:	d010      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d4:	e007      	b.n	80076e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40000c00 	.word	0x40000c00
 8007700:	40014000 	.word	0x40014000

08007704 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e097      	b.n	8007848 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fb fbb3 	bl	8002e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007748:	f023 0307 	bic.w	r3, r3, #7
 800774c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 fbc1 	bl	8007ee0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	4313      	orrs	r3, r2
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077a4:	f023 030c 	bic.w	r3, r3, #12
 80077a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	4313      	orrs	r3, r2
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	031b      	lsls	r3, r3, #12
 80077d4:	4313      	orrs	r3, r2
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4313      	orrs	r3, r2
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007860:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007868:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007870:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007878:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d110      	bne.n	80078a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d102      	bne.n	800788c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007886:	7b7b      	ldrb	r3, [r7, #13]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d001      	beq.n	8007890 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e069      	b.n	8007964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a0:	e031      	b.n	8007906 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d110      	bne.n	80078ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d102      	bne.n	80078b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078ae:	7b3b      	ldrb	r3, [r7, #12]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e055      	b.n	8007964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c8:	e01d      	b.n	8007906 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d108      	bne.n	80078e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d105      	bne.n	80078e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078d6:	7b7b      	ldrb	r3, [r7, #13]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d102      	bne.n	80078e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078dc:	7b3b      	ldrb	r3, [r7, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d001      	beq.n	80078e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e03e      	b.n	8007964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_TIM_Encoder_Start+0xc4>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b04      	cmp	r3, #4
 8007910:	d008      	beq.n	8007924 <HAL_TIM_Encoder_Start+0xd4>
 8007912:	e00f      	b.n	8007934 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2201      	movs	r2, #1
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fd85 	bl	800842c <TIM_CCxChannelCmd>
      break;
 8007922:	e016      	b.n	8007952 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2201      	movs	r2, #1
 800792a:	2104      	movs	r1, #4
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fd7d 	bl	800842c <TIM_CCxChannelCmd>
      break;
 8007932:	e00e      	b.n	8007952 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2201      	movs	r2, #1
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fd75 	bl	800842c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2201      	movs	r2, #1
 8007948:	2104      	movs	r1, #4
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fd6e 	bl	800842c <TIM_CCxChannelCmd>
      break;
 8007950:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0201 	orr.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0202 	mvn.w	r2, #2
 8007998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa77 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa69 	bl	8007e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa7a 	bl	8007eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d122      	bne.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d11b      	bne.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0204 	mvn.w	r2, #4
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa4d 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa3f 	bl	8007e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa50 	bl	8007eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0208 	mvn.w	r2, #8
 8007a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2204      	movs	r2, #4
 8007a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa23 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa15 	bl	8007e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa26 	bl	8007eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0210 	mvn.w	r2, #16
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9f9 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9eb 	bl	8007e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9fc 	bl	8007eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d10e      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0201 	mvn.w	r2, #1
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fa ffba 	bl	8002a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afa:	2b80      	cmp	r3, #128	; 0x80
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd26 	bl	8008568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d10e      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d107      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9c1 	bl	8007eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0220 	mvn.w	r2, #32
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fcf0 	bl	8008554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e0ae      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	f200 809f 	bhi.w	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007be5 	.word	0x08007be5
 8007bb4:	08007ce9 	.word	0x08007ce9
 8007bb8:	08007ce9 	.word	0x08007ce9
 8007bbc:	08007ce9 	.word	0x08007ce9
 8007bc0:	08007c25 	.word	0x08007c25
 8007bc4:	08007ce9 	.word	0x08007ce9
 8007bc8:	08007ce9 	.word	0x08007ce9
 8007bcc:	08007ce9 	.word	0x08007ce9
 8007bd0:	08007c67 	.word	0x08007c67
 8007bd4:	08007ce9 	.word	0x08007ce9
 8007bd8:	08007ce9 	.word	0x08007ce9
 8007bdc:	08007ce9 	.word	0x08007ce9
 8007be0:	08007ca7 	.word	0x08007ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f9f8 	bl	8007fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0208 	orr.w	r2, r2, #8
 8007bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0204 	bic.w	r2, r2, #4
 8007c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6999      	ldr	r1, [r3, #24]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	619a      	str	r2, [r3, #24]
      break;
 8007c22:	e064      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fa3e 	bl	80080ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6999      	ldr	r1, [r3, #24]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	021a      	lsls	r2, r3, #8
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	619a      	str	r2, [r3, #24]
      break;
 8007c64:	e043      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fa89 	bl	8008184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0208 	orr.w	r2, r2, #8
 8007c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0204 	bic.w	r2, r2, #4
 8007c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69d9      	ldr	r1, [r3, #28]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	61da      	str	r2, [r3, #28]
      break;
 8007ca4:	e023      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fad3 	bl	8008258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69d9      	ldr	r1, [r3, #28]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	021a      	lsls	r2, r3, #8
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	61da      	str	r2, [r3, #28]
      break;
 8007ce6:	e002      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_ConfigClockSource+0x1c>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e0b4      	b.n	8007e86 <HAL_TIM_ConfigClockSource+0x186>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d54:	d03e      	beq.n	8007dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	f200 8087 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d62:	f000 8086 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x172>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d87f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6c:	2b70      	cmp	r3, #112	; 0x70
 8007d6e:	d01a      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0xa6>
 8007d70:	2b70      	cmp	r3, #112	; 0x70
 8007d72:	d87b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d74:	2b60      	cmp	r3, #96	; 0x60
 8007d76:	d050      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x11a>
 8007d78:	2b60      	cmp	r3, #96	; 0x60
 8007d7a:	d877      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b50      	cmp	r3, #80	; 0x50
 8007d7e:	d03c      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0xfa>
 8007d80:	2b50      	cmp	r3, #80	; 0x50
 8007d82:	d873      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d058      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x13a>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d86f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b30      	cmp	r3, #48	; 0x30
 8007d8e:	d064      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d86b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d060      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d867      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05c      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d05a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007da4:	e062      	b.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6899      	ldr	r1, [r3, #8]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f000 fb19 	bl	80083ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	609a      	str	r2, [r3, #8]
      break;
 8007dd2:	e04f      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	6899      	ldr	r1, [r3, #8]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f000 fb02 	bl	80083ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007df6:	609a      	str	r2, [r3, #8]
      break;
 8007df8:	e03c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fa76 	bl	80082f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2150      	movs	r1, #80	; 0x50
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 facf 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e02c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f000 fa95 	bl	8008356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2160      	movs	r1, #96	; 0x60
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fabf 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007e38:	e01c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fa56 	bl	80082f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2140      	movs	r1, #64	; 0x40
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 faaf 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e00c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f000 faa6 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007e6a:	e003      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e70:	e000      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <TIM_Base_SetConfig+0xe4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00f      	beq.n	8007f18 <TIM_Base_SetConfig+0x38>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d00b      	beq.n	8007f18 <TIM_Base_SetConfig+0x38>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a31      	ldr	r2, [pc, #196]	; (8007fc8 <TIM_Base_SetConfig+0xe8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <TIM_Base_SetConfig+0x38>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a30      	ldr	r2, [pc, #192]	; (8007fcc <TIM_Base_SetConfig+0xec>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a2f      	ldr	r2, [pc, #188]	; (8007fd0 <TIM_Base_SetConfig+0xf0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a25      	ldr	r2, [pc, #148]	; (8007fc4 <TIM_Base_SetConfig+0xe4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01b      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f38:	d017      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a22      	ldr	r2, [pc, #136]	; (8007fc8 <TIM_Base_SetConfig+0xe8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <TIM_Base_SetConfig+0xec>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00f      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <TIM_Base_SetConfig+0xf0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00b      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <TIM_Base_SetConfig+0xf4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1e      	ldr	r2, [pc, #120]	; (8007fd8 <TIM_Base_SetConfig+0xf8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_Base_SetConfig+0x8a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <TIM_Base_SetConfig+0xfc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d108      	bne.n	8007f7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a08      	ldr	r2, [pc, #32]	; (8007fc4 <TIM_Base_SetConfig+0xe4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d103      	bne.n	8007fb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	615a      	str	r2, [r3, #20]
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	40014400 	.word	0x40014400
 8007fdc:	40014800 	.word	0x40014800

08007fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0302 	bic.w	r3, r3, #2
 8008028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <TIM_OC1_SetConfig+0xc8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d10c      	bne.n	8008056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0308 	bic.w	r3, r3, #8
 8008042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 0304 	bic.w	r3, r3, #4
 8008054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <TIM_OC1_SetConfig+0xc8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d111      	bne.n	8008082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800806c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	621a      	str	r2, [r3, #32]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	40010000 	.word	0x40010000

080080ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0210 	bic.w	r2, r3, #16
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f023 0320 	bic.w	r3, r3, #32
 80080f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <TIM_OC2_SetConfig+0xd4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d10d      	bne.n	8008128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a15      	ldr	r2, [pc, #84]	; (8008180 <TIM_OC2_SetConfig+0xd4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d113      	bne.n	8008158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000

08008184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <TIM_OC3_SetConfig+0xd0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10d      	bne.n	80081fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <TIM_OC3_SetConfig+0xd0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d113      	bne.n	800822e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	621a      	str	r2, [r3, #32]
}
 8008248:	bf00      	nop
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40010000 	.word	0x40010000

08008258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800828e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	031b      	lsls	r3, r3, #12
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a10      	ldr	r2, [pc, #64]	; (80082f4 <TIM_OC4_SetConfig+0x9c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d109      	bne.n	80082cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	019b      	lsls	r3, r3, #6
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000

080082f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	f023 0201 	bic.w	r2, r3, #1
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f023 030a 	bic.w	r3, r3, #10
 8008334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	f023 0210 	bic.w	r2, r3, #16
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	031b      	lsls	r3, r3, #12
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f043 0307 	orr.w	r3, r3, #7
 80083d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	609a      	str	r2, [r3, #8]
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	431a      	orrs	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4313      	orrs	r3, r2
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	609a      	str	r2, [r3, #8]
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 031f 	and.w	r3, r3, #31
 800843e:	2201      	movs	r2, #1
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1a      	ldr	r2, [r3, #32]
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	43db      	mvns	r3, r3
 800844e:	401a      	ands	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f003 031f 	and.w	r3, r3, #31
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	fa01 f303 	lsl.w	r3, r1, r3
 8008464:	431a      	orrs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800848c:	2302      	movs	r3, #2
 800848e:	e050      	b.n	8008532 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d018      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084dc:	d013      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a18      	ldr	r2, [pc, #96]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00e      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a15      	ldr	r2, [pc, #84]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d10c      	bne.n	8008520 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800850c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	4313      	orrs	r3, r2
 8008516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40014000 	.word	0x40014000

08008554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e03f      	b.n	800860e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fa fd60 	bl	8003068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fc7b 	bl	8008ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b0ba      	sub	sp, #232	; 0xe8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800863e:	2300      	movs	r3, #0
 8008640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb65 	bl	8008d46 <UART_Receive_IT>
      return;
 800867c:	e256      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800867e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80de 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
 8008688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008698:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80d1 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f043 0201 	orr.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
 80086d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f043 0202 	orr.w	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
 80086f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f043 0204 	orr.w	r2, r3, #4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d011      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f043 0208 	orr.w	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 81ed 	beq.w	8008b22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
 8008754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 faf0 	bl	8008d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <HAL_UART_IRQHandler+0x17a>
 800878a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d04f      	beq.n	8008832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9f8 	bl	8008b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d141      	bne.n	800882a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d9      	bne.n	80087a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d013      	beq.n	8008822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	4a7d      	ldr	r2, [pc, #500]	; (80089f4 <HAL_UART_IRQHandler+0x3dc>)
 8008800:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	4618      	mov	r0, r3
 8008808:	f7fb f85a 	bl	80038c0 <HAL_DMA_Abort_IT>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	e00e      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f99a 	bl	8008b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e00a      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f996 	bl	8008b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e006      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f992 	bl	8008b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800883e:	e170      	b.n	8008b22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	bf00      	nop
    return;
 8008842:	e16e      	b.n	8008b22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	2b01      	cmp	r3, #1
 800884a:	f040 814a 	bne.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800884e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8143 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800885c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 813c 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886a:	2300      	movs	r3, #0
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	f040 80b4 	bne.w	80089f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800889c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8140 	beq.w	8008b26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ae:	429a      	cmp	r2, r3
 80088b0:	f080 8139 	bcs.w	8008b26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	f000 8088 	beq.w	80089da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	330c      	adds	r3, #12
 80088d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800890e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d9      	bne.n	80088ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3314      	adds	r3, #20
 8008936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800893a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800893e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800894c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e1      	bne.n	8008916 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3314      	adds	r3, #20
 8008958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3314      	adds	r3, #20
 8008972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800897c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089aa:	f023 0310 	bic.w	r3, r3, #16
 80089ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80089be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e3      	bne.n	8008998 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fa ff03 	bl	80037e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f8c0 	bl	8008b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f0:	e099      	b.n	8008b26 <HAL_UART_IRQHandler+0x50e>
 80089f2:	bf00      	nop
 80089f4:	08008c4f 	.word	0x08008c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 808b 	beq.w	8008b2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8086 	beq.w	8008b2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a42:	647a      	str	r2, [r7, #68]	; 0x44
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e3      	bne.n	8008a1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	623b      	str	r3, [r7, #32]
   return(result);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3314      	adds	r3, #20
 8008a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac0:	61fa      	str	r2, [r7, #28]
 8008ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e3      	bne.n	8008a9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f848 	bl	8008b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae0:	e023      	b.n	8008b2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <HAL_UART_IRQHandler+0x4ea>
 8008aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8bb 	bl	8008c76 <UART_Transmit_IT>
    return;
 8008b00:	e014      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00e      	beq.n	8008b2c <HAL_UART_IRQHandler+0x514>
 8008b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d008      	beq.n	8008b2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f8fb 	bl	8008d16 <UART_EndTransmit_IT>
    return;
 8008b20:	e004      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
    return;
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
      return;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
      return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	37e8      	adds	r7, #232	; 0xe8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b095      	sub	sp, #84	; 0x54
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d119      	bne.n	8008c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	647b      	str	r3, [r7, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c20:	61ba      	str	r2, [r7, #24]
 8008c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e5      	bne.n	8008c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c42:	bf00      	nop
 8008c44:	3754      	adds	r7, #84	; 0x54
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff ff77 	bl	8008b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b21      	cmp	r3, #33	; 0x21
 8008c88:	d13e      	bne.n	8008d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d114      	bne.n	8008cbe <UART_Transmit_IT+0x48>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d110      	bne.n	8008cbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	1c9a      	adds	r2, r3, #2
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]
 8008cbc:	e008      	b.n	8008cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6211      	str	r1, [r2, #32]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10f      	bne.n	8008d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff fefc 	bl	8008b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b08c      	sub	sp, #48	; 0x30
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b22      	cmp	r3, #34	; 0x22
 8008d58:	f040 80ab 	bne.w	8008eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d64:	d117      	bne.n	8008d96 <UART_Receive_IT+0x50>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d113      	bne.n	8008d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	1c9a      	adds	r2, r3, #2
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	629a      	str	r2, [r3, #40]	; 0x28
 8008d94:	e026      	b.n	8008de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da8:	d007      	beq.n	8008dba <UART_Receive_IT+0x74>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <UART_Receive_IT+0x82>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e008      	b.n	8008dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4619      	mov	r1, r3
 8008df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d15a      	bne.n	8008eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0220 	bic.w	r2, r2, #32
 8008e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d135      	bne.n	8008ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f023 0310 	bic.w	r3, r3, #16
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	330c      	adds	r3, #12
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	623a      	str	r2, [r7, #32]
 8008e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	69f9      	ldr	r1, [r7, #28]
 8008e64:	6a3a      	ldr	r2, [r7, #32]
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e5      	bne.n	8008e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d10a      	bne.n	8008e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fe67 	bl	8008b70 <HAL_UARTEx_RxEventCallback>
 8008ea2:	e002      	b.n	8008eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff fe4f 	bl	8008b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e002      	b.n	8008eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
  }
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3730      	adds	r7, #48	; 0x30
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	b09f      	sub	sp, #124	; 0x7c
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed2:	68d9      	ldr	r1, [r3, #12]
 8008ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	ea40 0301 	orr.w	r3, r0, r1
 8008edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f00:	f021 010c 	bic.w	r1, r1, #12
 8008f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1a:	6999      	ldr	r1, [r3, #24]
 8008f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	ea40 0301 	orr.w	r3, r0, r1
 8008f24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4bc5      	ldr	r3, [pc, #788]	; (8009240 <UART_SetConfig+0x384>)
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d004      	beq.n	8008f3a <UART_SetConfig+0x7e>
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	4bc3      	ldr	r3, [pc, #780]	; (8009244 <UART_SetConfig+0x388>)
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d103      	bne.n	8008f42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f3a:	f7fe f9c3 	bl	80072c4 <HAL_RCC_GetPCLK2Freq>
 8008f3e:	6778      	str	r0, [r7, #116]	; 0x74
 8008f40:	e002      	b.n	8008f48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f42:	f7fe f9ab 	bl	800729c <HAL_RCC_GetPCLK1Freq>
 8008f46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f50:	f040 80b6 	bne.w	80090c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f56:	461c      	mov	r4, r3
 8008f58:	f04f 0500 	mov.w	r5, #0
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	462b      	mov	r3, r5
 8008f60:	1891      	adds	r1, r2, r2
 8008f62:	6439      	str	r1, [r7, #64]	; 0x40
 8008f64:	415b      	adcs	r3, r3
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
 8008f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f6c:	1912      	adds	r2, r2, r4
 8008f6e:	eb45 0303 	adc.w	r3, r5, r3
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f04f 0100 	mov.w	r1, #0
 8008f7a:	00d9      	lsls	r1, r3, #3
 8008f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f80:	00d0      	lsls	r0, r2, #3
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	1911      	adds	r1, r2, r4
 8008f88:	6639      	str	r1, [r7, #96]	; 0x60
 8008f8a:	416b      	adcs	r3, r5
 8008f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	1891      	adds	r1, r2, r2
 8008f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f9c:	415b      	adcs	r3, r3
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008fa8:	f7f7 fee0 	bl	8000d6c <__aeabi_uldivmod>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4ba5      	ldr	r3, [pc, #660]	; (8009248 <UART_SetConfig+0x38c>)
 8008fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	011e      	lsls	r6, r3, #4
 8008fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fbc:	461c      	mov	r4, r3
 8008fbe:	f04f 0500 	mov.w	r5, #0
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	1891      	adds	r1, r2, r2
 8008fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8008fca:	415b      	adcs	r3, r3
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008fd2:	1912      	adds	r2, r2, r4
 8008fd4:	eb45 0303 	adc.w	r3, r5, r3
 8008fd8:	f04f 0000 	mov.w	r0, #0
 8008fdc:	f04f 0100 	mov.w	r1, #0
 8008fe0:	00d9      	lsls	r1, r3, #3
 8008fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fe6:	00d0      	lsls	r0, r2, #3
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	1911      	adds	r1, r2, r4
 8008fee:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ff0:	416b      	adcs	r3, r5
 8008ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	f04f 0300 	mov.w	r3, #0
 8008ffe:	1891      	adds	r1, r2, r2
 8009000:	62b9      	str	r1, [r7, #40]	; 0x28
 8009002:	415b      	adcs	r3, r3
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800900a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800900e:	f7f7 fead 	bl	8000d6c <__aeabi_uldivmod>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4b8c      	ldr	r3, [pc, #560]	; (8009248 <UART_SetConfig+0x38c>)
 8009018:	fba3 1302 	umull	r1, r3, r3, r2
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	2164      	movs	r1, #100	; 0x64
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	3332      	adds	r3, #50	; 0x32
 800902a:	4a87      	ldr	r2, [pc, #540]	; (8009248 <UART_SetConfig+0x38c>)
 800902c:	fba2 2303 	umull	r2, r3, r2, r3
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009038:	441e      	add	r6, r3
 800903a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903c:	4618      	mov	r0, r3
 800903e:	f04f 0100 	mov.w	r1, #0
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	1894      	adds	r4, r2, r2
 8009048:	623c      	str	r4, [r7, #32]
 800904a:	415b      	adcs	r3, r3
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
 800904e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009052:	1812      	adds	r2, r2, r0
 8009054:	eb41 0303 	adc.w	r3, r1, r3
 8009058:	f04f 0400 	mov.w	r4, #0
 800905c:	f04f 0500 	mov.w	r5, #0
 8009060:	00dd      	lsls	r5, r3, #3
 8009062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009066:	00d4      	lsls	r4, r2, #3
 8009068:	4622      	mov	r2, r4
 800906a:	462b      	mov	r3, r5
 800906c:	1814      	adds	r4, r2, r0
 800906e:	653c      	str	r4, [r7, #80]	; 0x50
 8009070:	414b      	adcs	r3, r1
 8009072:	657b      	str	r3, [r7, #84]	; 0x54
 8009074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	461a      	mov	r2, r3
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	1891      	adds	r1, r2, r2
 8009080:	61b9      	str	r1, [r7, #24]
 8009082:	415b      	adcs	r3, r3
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800908a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800908e:	f7f7 fe6d 	bl	8000d6c <__aeabi_uldivmod>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4b6c      	ldr	r3, [pc, #432]	; (8009248 <UART_SetConfig+0x38c>)
 8009098:	fba3 1302 	umull	r1, r3, r3, r2
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	2164      	movs	r1, #100	; 0x64
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	3332      	adds	r3, #50	; 0x32
 80090aa:	4a67      	ldr	r2, [pc, #412]	; (8009248 <UART_SetConfig+0x38c>)
 80090ac:	fba2 2303 	umull	r2, r3, r2, r3
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	f003 0207 	and.w	r2, r3, #7
 80090b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4432      	add	r2, r6
 80090bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090be:	e0b9      	b.n	8009234 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c2:	461c      	mov	r4, r3
 80090c4:	f04f 0500 	mov.w	r5, #0
 80090c8:	4622      	mov	r2, r4
 80090ca:	462b      	mov	r3, r5
 80090cc:	1891      	adds	r1, r2, r2
 80090ce:	6139      	str	r1, [r7, #16]
 80090d0:	415b      	adcs	r3, r3
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090d8:	1912      	adds	r2, r2, r4
 80090da:	eb45 0303 	adc.w	r3, r5, r3
 80090de:	f04f 0000 	mov.w	r0, #0
 80090e2:	f04f 0100 	mov.w	r1, #0
 80090e6:	00d9      	lsls	r1, r3, #3
 80090e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090ec:	00d0      	lsls	r0, r2, #3
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	eb12 0804 	adds.w	r8, r2, r4
 80090f6:	eb43 0905 	adc.w	r9, r3, r5
 80090fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4618      	mov	r0, r3
 8009100:	f04f 0100 	mov.w	r1, #0
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	008b      	lsls	r3, r1, #2
 800910e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009112:	0082      	lsls	r2, r0, #2
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fe28 	bl	8000d6c <__aeabi_uldivmod>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4b49      	ldr	r3, [pc, #292]	; (8009248 <UART_SetConfig+0x38c>)
 8009122:	fba3 2302 	umull	r2, r3, r3, r2
 8009126:	095b      	lsrs	r3, r3, #5
 8009128:	011e      	lsls	r6, r3, #4
 800912a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800912c:	4618      	mov	r0, r3
 800912e:	f04f 0100 	mov.w	r1, #0
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	1894      	adds	r4, r2, r2
 8009138:	60bc      	str	r4, [r7, #8]
 800913a:	415b      	adcs	r3, r3
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009142:	1812      	adds	r2, r2, r0
 8009144:	eb41 0303 	adc.w	r3, r1, r3
 8009148:	f04f 0400 	mov.w	r4, #0
 800914c:	f04f 0500 	mov.w	r5, #0
 8009150:	00dd      	lsls	r5, r3, #3
 8009152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009156:	00d4      	lsls	r4, r2, #3
 8009158:	4622      	mov	r2, r4
 800915a:	462b      	mov	r3, r5
 800915c:	1814      	adds	r4, r2, r0
 800915e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009160:	414b      	adcs	r3, r1
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	f04f 0100 	mov.w	r1, #0
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	008b      	lsls	r3, r1, #2
 8009178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800917c:	0082      	lsls	r2, r0, #2
 800917e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009182:	f7f7 fdf3 	bl	8000d6c <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4b2f      	ldr	r3, [pc, #188]	; (8009248 <UART_SetConfig+0x38c>)
 800918c:	fba3 1302 	umull	r1, r3, r3, r2
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	2164      	movs	r1, #100	; 0x64
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	3332      	adds	r3, #50	; 0x32
 800919e:	4a2a      	ldr	r2, [pc, #168]	; (8009248 <UART_SetConfig+0x38c>)
 80091a0:	fba2 2303 	umull	r2, r3, r2, r3
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091aa:	441e      	add	r6, r3
 80091ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ae:	4618      	mov	r0, r3
 80091b0:	f04f 0100 	mov.w	r1, #0
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	1894      	adds	r4, r2, r2
 80091ba:	603c      	str	r4, [r7, #0]
 80091bc:	415b      	adcs	r3, r3
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c4:	1812      	adds	r2, r2, r0
 80091c6:	eb41 0303 	adc.w	r3, r1, r3
 80091ca:	f04f 0400 	mov.w	r4, #0
 80091ce:	f04f 0500 	mov.w	r5, #0
 80091d2:	00dd      	lsls	r5, r3, #3
 80091d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091d8:	00d4      	lsls	r4, r2, #3
 80091da:	4622      	mov	r2, r4
 80091dc:	462b      	mov	r3, r5
 80091de:	eb12 0a00 	adds.w	sl, r2, r0
 80091e2:	eb43 0b01 	adc.w	fp, r3, r1
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f04f 0100 	mov.w	r1, #0
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	008b      	lsls	r3, r1, #2
 80091fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091fe:	0082      	lsls	r2, r0, #2
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 fdb2 	bl	8000d6c <__aeabi_uldivmod>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <UART_SetConfig+0x38c>)
 800920e:	fba3 1302 	umull	r1, r3, r3, r2
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	2164      	movs	r1, #100	; 0x64
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	3332      	adds	r3, #50	; 0x32
 8009220:	4a09      	ldr	r2, [pc, #36]	; (8009248 <UART_SetConfig+0x38c>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	f003 020f 	and.w	r2, r3, #15
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4432      	add	r2, r6
 8009232:	609a      	str	r2, [r3, #8]
}
 8009234:	bf00      	nop
 8009236:	377c      	adds	r7, #124	; 0x7c
 8009238:	46bd      	mov	sp, r7
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	bf00      	nop
 8009240:	40011000 	.word	0x40011000
 8009244:	40011400 	.word	0x40011400
 8009248:	51eb851f 	.word	0x51eb851f

0800924c <__errno>:
 800924c:	4b01      	ldr	r3, [pc, #4]	; (8009254 <__errno+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000030 	.word	0x20000030

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	; (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	; (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	; (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	; (800929c <__libc_init_array+0x44>)
 800926c:	f000 ffd6 	bl	800a21c <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	0800a2a8 	.word	0x0800a2a8
 8009294:	0800a2a8 	.word	0x0800a2a8
 8009298:	0800a2a8 	.word	0x0800a2a8
 800929c:	0800a2ac 	.word	0x0800a2ac

080092a0 <memset>:
 80092a0:	4402      	add	r2, r0
 80092a2:	4603      	mov	r3, r0
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d100      	bne.n	80092aa <memset+0xa>
 80092a8:	4770      	bx	lr
 80092aa:	f803 1b01 	strb.w	r1, [r3], #1
 80092ae:	e7f9      	b.n	80092a4 <memset+0x4>

080092b0 <pow>:
 80092b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	ec59 8b10 	vmov	r8, r9, d0
 80092b8:	ec57 6b11 	vmov	r6, r7, d1
 80092bc:	f000 f8a8 	bl	8009410 <__ieee754_pow>
 80092c0:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <pow+0x14c>)
 80092c2:	f993 3000 	ldrsb.w	r3, [r3]
 80092c6:	3301      	adds	r3, #1
 80092c8:	ec55 4b10 	vmov	r4, r5, d0
 80092cc:	d015      	beq.n	80092fa <pow+0x4a>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f7 fbd5 	bl	8000a84 <__aeabi_dcmpun>
 80092da:	b970      	cbnz	r0, 80092fa <pow+0x4a>
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fbce 	bl	8000a84 <__aeabi_dcmpun>
 80092e8:	2200      	movs	r2, #0
 80092ea:	2300      	movs	r3, #0
 80092ec:	b148      	cbz	r0, 8009302 <pow+0x52>
 80092ee:	4630      	mov	r0, r6
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7f7 fb95 	bl	8000a20 <__aeabi_dcmpeq>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d17d      	bne.n	80093f6 <pow+0x146>
 80092fa:	ec45 4b10 	vmov	d0, r4, r5
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	4640      	mov	r0, r8
 8009304:	4649      	mov	r1, r9
 8009306:	f7f7 fb8b 	bl	8000a20 <__aeabi_dcmpeq>
 800930a:	b1e0      	cbz	r0, 8009346 <pow+0x96>
 800930c:	2200      	movs	r2, #0
 800930e:	2300      	movs	r3, #0
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f7 fb84 	bl	8000a20 <__aeabi_dcmpeq>
 8009318:	2800      	cmp	r0, #0
 800931a:	d16c      	bne.n	80093f6 <pow+0x146>
 800931c:	ec47 6b10 	vmov	d0, r6, r7
 8009320:	f000 fe55 	bl	8009fce <finite>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0e8      	beq.n	80092fa <pow+0x4a>
 8009328:	2200      	movs	r2, #0
 800932a:	2300      	movs	r3, #0
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fb80 	bl	8000a34 <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	d0e0      	beq.n	80092fa <pow+0x4a>
 8009338:	f7ff ff88 	bl	800924c <__errno>
 800933c:	2321      	movs	r3, #33	; 0x21
 800933e:	6003      	str	r3, [r0, #0]
 8009340:	2400      	movs	r4, #0
 8009342:	4d2f      	ldr	r5, [pc, #188]	; (8009400 <pow+0x150>)
 8009344:	e7d9      	b.n	80092fa <pow+0x4a>
 8009346:	ec45 4b10 	vmov	d0, r4, r5
 800934a:	f000 fe40 	bl	8009fce <finite>
 800934e:	bbb8      	cbnz	r0, 80093c0 <pow+0x110>
 8009350:	ec49 8b10 	vmov	d0, r8, r9
 8009354:	f000 fe3b 	bl	8009fce <finite>
 8009358:	b390      	cbz	r0, 80093c0 <pow+0x110>
 800935a:	ec47 6b10 	vmov	d0, r6, r7
 800935e:	f000 fe36 	bl	8009fce <finite>
 8009362:	b368      	cbz	r0, 80093c0 <pow+0x110>
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f7 fb8a 	bl	8000a84 <__aeabi_dcmpun>
 8009370:	b160      	cbz	r0, 800938c <pow+0xdc>
 8009372:	f7ff ff6b 	bl	800924c <__errno>
 8009376:	2321      	movs	r3, #33	; 0x21
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4610      	mov	r0, r2
 8009380:	4619      	mov	r1, r3
 8009382:	f7f7 fa0f 	bl	80007a4 <__aeabi_ddiv>
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	e7b6      	b.n	80092fa <pow+0x4a>
 800938c:	f7ff ff5e 	bl	800924c <__errno>
 8009390:	2322      	movs	r3, #34	; 0x22
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 fb4a 	bl	8000a34 <__aeabi_dcmplt>
 80093a0:	2400      	movs	r4, #0
 80093a2:	b158      	cbz	r0, 80093bc <pow+0x10c>
 80093a4:	ec47 6b10 	vmov	d0, r6, r7
 80093a8:	f000 fe26 	bl	8009ff8 <rint>
 80093ac:	4632      	mov	r2, r6
 80093ae:	ec51 0b10 	vmov	r0, r1, d0
 80093b2:	463b      	mov	r3, r7
 80093b4:	f7f7 fb34 	bl	8000a20 <__aeabi_dcmpeq>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d0c2      	beq.n	8009342 <pow+0x92>
 80093bc:	4d11      	ldr	r5, [pc, #68]	; (8009404 <pow+0x154>)
 80093be:	e79c      	b.n	80092fa <pow+0x4a>
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f7 fb2a 	bl	8000a20 <__aeabi_dcmpeq>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d094      	beq.n	80092fa <pow+0x4a>
 80093d0:	ec49 8b10 	vmov	d0, r8, r9
 80093d4:	f000 fdfb 	bl	8009fce <finite>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d08e      	beq.n	80092fa <pow+0x4a>
 80093dc:	ec47 6b10 	vmov	d0, r6, r7
 80093e0:	f000 fdf5 	bl	8009fce <finite>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d088      	beq.n	80092fa <pow+0x4a>
 80093e8:	f7ff ff30 	bl	800924c <__errno>
 80093ec:	2322      	movs	r3, #34	; 0x22
 80093ee:	6003      	str	r3, [r0, #0]
 80093f0:	2400      	movs	r4, #0
 80093f2:	2500      	movs	r5, #0
 80093f4:	e781      	b.n	80092fa <pow+0x4a>
 80093f6:	4d04      	ldr	r5, [pc, #16]	; (8009408 <pow+0x158>)
 80093f8:	2400      	movs	r4, #0
 80093fa:	e77e      	b.n	80092fa <pow+0x4a>
 80093fc:	20000094 	.word	0x20000094
 8009400:	fff00000 	.word	0xfff00000
 8009404:	7ff00000 	.word	0x7ff00000
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	00000000 	.word	0x00000000

08009410 <__ieee754_pow>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	ed2d 8b06 	vpush	{d8-d10}
 8009418:	b08d      	sub	sp, #52	; 0x34
 800941a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800941e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009422:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009426:	ea56 0100 	orrs.w	r1, r6, r0
 800942a:	ec53 2b10 	vmov	r2, r3, d0
 800942e:	f000 84d1 	beq.w	8009dd4 <__ieee754_pow+0x9c4>
 8009432:	497f      	ldr	r1, [pc, #508]	; (8009630 <__ieee754_pow+0x220>)
 8009434:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009438:	428c      	cmp	r4, r1
 800943a:	ee10 8a10 	vmov	r8, s0
 800943e:	4699      	mov	r9, r3
 8009440:	dc09      	bgt.n	8009456 <__ieee754_pow+0x46>
 8009442:	d103      	bne.n	800944c <__ieee754_pow+0x3c>
 8009444:	b97a      	cbnz	r2, 8009466 <__ieee754_pow+0x56>
 8009446:	42a6      	cmp	r6, r4
 8009448:	dd02      	ble.n	8009450 <__ieee754_pow+0x40>
 800944a:	e00c      	b.n	8009466 <__ieee754_pow+0x56>
 800944c:	428e      	cmp	r6, r1
 800944e:	dc02      	bgt.n	8009456 <__ieee754_pow+0x46>
 8009450:	428e      	cmp	r6, r1
 8009452:	d110      	bne.n	8009476 <__ieee754_pow+0x66>
 8009454:	b178      	cbz	r0, 8009476 <__ieee754_pow+0x66>
 8009456:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800945a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800945e:	ea54 0308 	orrs.w	r3, r4, r8
 8009462:	f000 84b7 	beq.w	8009dd4 <__ieee754_pow+0x9c4>
 8009466:	4873      	ldr	r0, [pc, #460]	; (8009634 <__ieee754_pow+0x224>)
 8009468:	b00d      	add	sp, #52	; 0x34
 800946a:	ecbd 8b06 	vpop	{d8-d10}
 800946e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009472:	f000 bdb9 	b.w	8009fe8 <nan>
 8009476:	f1b9 0f00 	cmp.w	r9, #0
 800947a:	da36      	bge.n	80094ea <__ieee754_pow+0xda>
 800947c:	496e      	ldr	r1, [pc, #440]	; (8009638 <__ieee754_pow+0x228>)
 800947e:	428e      	cmp	r6, r1
 8009480:	dc51      	bgt.n	8009526 <__ieee754_pow+0x116>
 8009482:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009486:	428e      	cmp	r6, r1
 8009488:	f340 84af 	ble.w	8009dea <__ieee754_pow+0x9da>
 800948c:	1531      	asrs	r1, r6, #20
 800948e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009492:	2914      	cmp	r1, #20
 8009494:	dd0f      	ble.n	80094b6 <__ieee754_pow+0xa6>
 8009496:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800949a:	fa20 fc01 	lsr.w	ip, r0, r1
 800949e:	fa0c f101 	lsl.w	r1, ip, r1
 80094a2:	4281      	cmp	r1, r0
 80094a4:	f040 84a1 	bne.w	8009dea <__ieee754_pow+0x9da>
 80094a8:	f00c 0c01 	and.w	ip, ip, #1
 80094ac:	f1cc 0102 	rsb	r1, ip, #2
 80094b0:	9100      	str	r1, [sp, #0]
 80094b2:	b180      	cbz	r0, 80094d6 <__ieee754_pow+0xc6>
 80094b4:	e059      	b.n	800956a <__ieee754_pow+0x15a>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d155      	bne.n	8009566 <__ieee754_pow+0x156>
 80094ba:	f1c1 0114 	rsb	r1, r1, #20
 80094be:	fa46 fc01 	asr.w	ip, r6, r1
 80094c2:	fa0c f101 	lsl.w	r1, ip, r1
 80094c6:	42b1      	cmp	r1, r6
 80094c8:	f040 848c 	bne.w	8009de4 <__ieee754_pow+0x9d4>
 80094cc:	f00c 0c01 	and.w	ip, ip, #1
 80094d0:	f1cc 0102 	rsb	r1, ip, #2
 80094d4:	9100      	str	r1, [sp, #0]
 80094d6:	4959      	ldr	r1, [pc, #356]	; (800963c <__ieee754_pow+0x22c>)
 80094d8:	428e      	cmp	r6, r1
 80094da:	d12d      	bne.n	8009538 <__ieee754_pow+0x128>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	da79      	bge.n	80095d4 <__ieee754_pow+0x1c4>
 80094e0:	4956      	ldr	r1, [pc, #344]	; (800963c <__ieee754_pow+0x22c>)
 80094e2:	2000      	movs	r0, #0
 80094e4:	f7f7 f95e 	bl	80007a4 <__aeabi_ddiv>
 80094e8:	e016      	b.n	8009518 <__ieee754_pow+0x108>
 80094ea:	2100      	movs	r1, #0
 80094ec:	9100      	str	r1, [sp, #0]
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d13b      	bne.n	800956a <__ieee754_pow+0x15a>
 80094f2:	494f      	ldr	r1, [pc, #316]	; (8009630 <__ieee754_pow+0x220>)
 80094f4:	428e      	cmp	r6, r1
 80094f6:	d1ee      	bne.n	80094d6 <__ieee754_pow+0xc6>
 80094f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80094fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009500:	ea53 0308 	orrs.w	r3, r3, r8
 8009504:	f000 8466 	beq.w	8009dd4 <__ieee754_pow+0x9c4>
 8009508:	4b4d      	ldr	r3, [pc, #308]	; (8009640 <__ieee754_pow+0x230>)
 800950a:	429c      	cmp	r4, r3
 800950c:	dd0d      	ble.n	800952a <__ieee754_pow+0x11a>
 800950e:	2f00      	cmp	r7, #0
 8009510:	f280 8464 	bge.w	8009ddc <__ieee754_pow+0x9cc>
 8009514:	2000      	movs	r0, #0
 8009516:	2100      	movs	r1, #0
 8009518:	ec41 0b10 	vmov	d0, r0, r1
 800951c:	b00d      	add	sp, #52	; 0x34
 800951e:	ecbd 8b06 	vpop	{d8-d10}
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	2102      	movs	r1, #2
 8009528:	e7e0      	b.n	80094ec <__ieee754_pow+0xdc>
 800952a:	2f00      	cmp	r7, #0
 800952c:	daf2      	bge.n	8009514 <__ieee754_pow+0x104>
 800952e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009532:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009536:	e7ef      	b.n	8009518 <__ieee754_pow+0x108>
 8009538:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800953c:	d104      	bne.n	8009548 <__ieee754_pow+0x138>
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f7f7 f805 	bl	8000550 <__aeabi_dmul>
 8009546:	e7e7      	b.n	8009518 <__ieee754_pow+0x108>
 8009548:	493e      	ldr	r1, [pc, #248]	; (8009644 <__ieee754_pow+0x234>)
 800954a:	428f      	cmp	r7, r1
 800954c:	d10d      	bne.n	800956a <__ieee754_pow+0x15a>
 800954e:	f1b9 0f00 	cmp.w	r9, #0
 8009552:	db0a      	blt.n	800956a <__ieee754_pow+0x15a>
 8009554:	ec43 2b10 	vmov	d0, r2, r3
 8009558:	b00d      	add	sp, #52	; 0x34
 800955a:	ecbd 8b06 	vpop	{d8-d10}
 800955e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009562:	f000 bc77 	b.w	8009e54 <__ieee754_sqrt>
 8009566:	2100      	movs	r1, #0
 8009568:	9100      	str	r1, [sp, #0]
 800956a:	ec43 2b10 	vmov	d0, r2, r3
 800956e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009572:	f000 fd23 	bl	8009fbc <fabs>
 8009576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800957a:	ec51 0b10 	vmov	r0, r1, d0
 800957e:	f1b8 0f00 	cmp.w	r8, #0
 8009582:	d12a      	bne.n	80095da <__ieee754_pow+0x1ca>
 8009584:	b12c      	cbz	r4, 8009592 <__ieee754_pow+0x182>
 8009586:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800963c <__ieee754_pow+0x22c>
 800958a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800958e:	45e6      	cmp	lr, ip
 8009590:	d123      	bne.n	80095da <__ieee754_pow+0x1ca>
 8009592:	2f00      	cmp	r7, #0
 8009594:	da05      	bge.n	80095a2 <__ieee754_pow+0x192>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	2000      	movs	r0, #0
 800959c:	4927      	ldr	r1, [pc, #156]	; (800963c <__ieee754_pow+0x22c>)
 800959e:	f7f7 f901 	bl	80007a4 <__aeabi_ddiv>
 80095a2:	f1b9 0f00 	cmp.w	r9, #0
 80095a6:	dab7      	bge.n	8009518 <__ieee754_pow+0x108>
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80095ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80095b2:	4323      	orrs	r3, r4
 80095b4:	d108      	bne.n	80095c8 <__ieee754_pow+0x1b8>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4610      	mov	r0, r2
 80095bc:	4619      	mov	r1, r3
 80095be:	f7f6 fe0f 	bl	80001e0 <__aeabi_dsub>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	e78d      	b.n	80094e4 <__ieee754_pow+0xd4>
 80095c8:	9b00      	ldr	r3, [sp, #0]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d1a4      	bne.n	8009518 <__ieee754_pow+0x108>
 80095ce:	4602      	mov	r2, r0
 80095d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095d4:	4610      	mov	r0, r2
 80095d6:	4619      	mov	r1, r3
 80095d8:	e79e      	b.n	8009518 <__ieee754_pow+0x108>
 80095da:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80095de:	f10c 35ff 	add.w	r5, ip, #4294967295
 80095e2:	950a      	str	r5, [sp, #40]	; 0x28
 80095e4:	9d00      	ldr	r5, [sp, #0]
 80095e6:	46ac      	mov	ip, r5
 80095e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095ea:	ea5c 0505 	orrs.w	r5, ip, r5
 80095ee:	d0e4      	beq.n	80095ba <__ieee754_pow+0x1aa>
 80095f0:	4b15      	ldr	r3, [pc, #84]	; (8009648 <__ieee754_pow+0x238>)
 80095f2:	429e      	cmp	r6, r3
 80095f4:	f340 80fc 	ble.w	80097f0 <__ieee754_pow+0x3e0>
 80095f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80095fc:	429e      	cmp	r6, r3
 80095fe:	4b10      	ldr	r3, [pc, #64]	; (8009640 <__ieee754_pow+0x230>)
 8009600:	dd07      	ble.n	8009612 <__ieee754_pow+0x202>
 8009602:	429c      	cmp	r4, r3
 8009604:	dc0a      	bgt.n	800961c <__ieee754_pow+0x20c>
 8009606:	2f00      	cmp	r7, #0
 8009608:	da84      	bge.n	8009514 <__ieee754_pow+0x104>
 800960a:	a307      	add	r3, pc, #28	; (adr r3, 8009628 <__ieee754_pow+0x218>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	e795      	b.n	800953e <__ieee754_pow+0x12e>
 8009612:	429c      	cmp	r4, r3
 8009614:	dbf7      	blt.n	8009606 <__ieee754_pow+0x1f6>
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <__ieee754_pow+0x22c>)
 8009618:	429c      	cmp	r4, r3
 800961a:	dd17      	ble.n	800964c <__ieee754_pow+0x23c>
 800961c:	2f00      	cmp	r7, #0
 800961e:	dcf4      	bgt.n	800960a <__ieee754_pow+0x1fa>
 8009620:	e778      	b.n	8009514 <__ieee754_pow+0x104>
 8009622:	bf00      	nop
 8009624:	f3af 8000 	nop.w
 8009628:	8800759c 	.word	0x8800759c
 800962c:	7e37e43c 	.word	0x7e37e43c
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	0800a258 	.word	0x0800a258
 8009638:	433fffff 	.word	0x433fffff
 800963c:	3ff00000 	.word	0x3ff00000
 8009640:	3fefffff 	.word	0x3fefffff
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	41e00000 	.word	0x41e00000
 800964c:	4b64      	ldr	r3, [pc, #400]	; (80097e0 <__ieee754_pow+0x3d0>)
 800964e:	2200      	movs	r2, #0
 8009650:	f7f6 fdc6 	bl	80001e0 <__aeabi_dsub>
 8009654:	a356      	add	r3, pc, #344	; (adr r3, 80097b0 <__ieee754_pow+0x3a0>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	4604      	mov	r4, r0
 800965c:	460d      	mov	r5, r1
 800965e:	f7f6 ff77 	bl	8000550 <__aeabi_dmul>
 8009662:	a355      	add	r3, pc, #340	; (adr r3, 80097b8 <__ieee754_pow+0x3a8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	4620      	mov	r0, r4
 800966e:	4629      	mov	r1, r5
 8009670:	f7f6 ff6e 	bl	8000550 <__aeabi_dmul>
 8009674:	4b5b      	ldr	r3, [pc, #364]	; (80097e4 <__ieee754_pow+0x3d4>)
 8009676:	4682      	mov	sl, r0
 8009678:	468b      	mov	fp, r1
 800967a:	2200      	movs	r2, #0
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 ff66 	bl	8000550 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	a14d      	add	r1, pc, #308	; (adr r1, 80097c0 <__ieee754_pow+0x3b0>)
 800968a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968e:	f7f6 fda7 	bl	80001e0 <__aeabi_dsub>
 8009692:	4622      	mov	r2, r4
 8009694:	462b      	mov	r3, r5
 8009696:	f7f6 ff5b 	bl	8000550 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	2000      	movs	r0, #0
 80096a0:	4951      	ldr	r1, [pc, #324]	; (80097e8 <__ieee754_pow+0x3d8>)
 80096a2:	f7f6 fd9d 	bl	80001e0 <__aeabi_dsub>
 80096a6:	4622      	mov	r2, r4
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	462b      	mov	r3, r5
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 ff4d 	bl	8000550 <__aeabi_dmul>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	f7f6 ff47 	bl	8000550 <__aeabi_dmul>
 80096c2:	a341      	add	r3, pc, #260	; (adr r3, 80097c8 <__ieee754_pow+0x3b8>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ff42 	bl	8000550 <__aeabi_dmul>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4650      	mov	r0, sl
 80096d2:	4659      	mov	r1, fp
 80096d4:	f7f6 fd84 	bl	80001e0 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4680      	mov	r8, r0
 80096de:	4689      	mov	r9, r1
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fd7e 	bl	80001e4 <__adddf3>
 80096e8:	2400      	movs	r4, #0
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	4620      	mov	r0, r4
 80096f0:	460d      	mov	r5, r1
 80096f2:	f7f6 fd75 	bl	80001e0 <__aeabi_dsub>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 fd6f 	bl	80001e0 <__aeabi_dsub>
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009706:	3b01      	subs	r3, #1
 8009708:	4313      	orrs	r3, r2
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	f040 81f1 	bne.w	8009af4 <__ieee754_pow+0x6e4>
 8009712:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80097d0 <__ieee754_pow+0x3c0>
 8009716:	eeb0 8a47 	vmov.f32	s16, s14
 800971a:	eef0 8a67 	vmov.f32	s17, s15
 800971e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009722:	2600      	movs	r6, #0
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972c:	f7f6 fd58 	bl	80001e0 <__aeabi_dsub>
 8009730:	4622      	mov	r2, r4
 8009732:	462b      	mov	r3, r5
 8009734:	f7f6 ff0c 	bl	8000550 <__aeabi_dmul>
 8009738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800973c:	4680      	mov	r8, r0
 800973e:	4689      	mov	r9, r1
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f6 ff04 	bl	8000550 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4640      	mov	r0, r8
 800974e:	4649      	mov	r1, r9
 8009750:	f7f6 fd48 	bl	80001e4 <__adddf3>
 8009754:	4632      	mov	r2, r6
 8009756:	463b      	mov	r3, r7
 8009758:	4680      	mov	r8, r0
 800975a:	4689      	mov	r9, r1
 800975c:	4620      	mov	r0, r4
 800975e:	4629      	mov	r1, r5
 8009760:	f7f6 fef6 	bl	8000550 <__aeabi_dmul>
 8009764:	460b      	mov	r3, r1
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	4602      	mov	r2, r0
 800976c:	4649      	mov	r1, r9
 800976e:	4640      	mov	r0, r8
 8009770:	f7f6 fd38 	bl	80001e4 <__adddf3>
 8009774:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <__ieee754_pow+0x3dc>)
 8009776:	4299      	cmp	r1, r3
 8009778:	ec45 4b19 	vmov	d9, r4, r5
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	468b      	mov	fp, r1
 8009782:	f340 82fe 	ble.w	8009d82 <__ieee754_pow+0x972>
 8009786:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800978a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800978e:	4303      	orrs	r3, r0
 8009790:	f000 81f0 	beq.w	8009b74 <__ieee754_pow+0x764>
 8009794:	a310      	add	r3, pc, #64	; (adr r3, 80097d8 <__ieee754_pow+0x3c8>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	ec51 0b18 	vmov	r0, r1, d8
 800979e:	f7f6 fed7 	bl	8000550 <__aeabi_dmul>
 80097a2:	a30d      	add	r3, pc, #52	; (adr r3, 80097d8 <__ieee754_pow+0x3c8>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	e6cb      	b.n	8009542 <__ieee754_pow+0x132>
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w
 80097b0:	60000000 	.word	0x60000000
 80097b4:	3ff71547 	.word	0x3ff71547
 80097b8:	f85ddf44 	.word	0xf85ddf44
 80097bc:	3e54ae0b 	.word	0x3e54ae0b
 80097c0:	55555555 	.word	0x55555555
 80097c4:	3fd55555 	.word	0x3fd55555
 80097c8:	652b82fe 	.word	0x652b82fe
 80097cc:	3ff71547 	.word	0x3ff71547
 80097d0:	00000000 	.word	0x00000000
 80097d4:	bff00000 	.word	0xbff00000
 80097d8:	8800759c 	.word	0x8800759c
 80097dc:	7e37e43c 	.word	0x7e37e43c
 80097e0:	3ff00000 	.word	0x3ff00000
 80097e4:	3fd00000 	.word	0x3fd00000
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	408fffff 	.word	0x408fffff
 80097f0:	4bd7      	ldr	r3, [pc, #860]	; (8009b50 <__ieee754_pow+0x740>)
 80097f2:	ea03 0309 	and.w	r3, r3, r9
 80097f6:	2200      	movs	r2, #0
 80097f8:	b92b      	cbnz	r3, 8009806 <__ieee754_pow+0x3f6>
 80097fa:	4bd6      	ldr	r3, [pc, #856]	; (8009b54 <__ieee754_pow+0x744>)
 80097fc:	f7f6 fea8 	bl	8000550 <__aeabi_dmul>
 8009800:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009804:	460c      	mov	r4, r1
 8009806:	1523      	asrs	r3, r4, #20
 8009808:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800980c:	4413      	add	r3, r2
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	4bd1      	ldr	r3, [pc, #836]	; (8009b58 <__ieee754_pow+0x748>)
 8009812:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009816:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800981a:	429c      	cmp	r4, r3
 800981c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009820:	dd08      	ble.n	8009834 <__ieee754_pow+0x424>
 8009822:	4bce      	ldr	r3, [pc, #824]	; (8009b5c <__ieee754_pow+0x74c>)
 8009824:	429c      	cmp	r4, r3
 8009826:	f340 8163 	ble.w	8009af0 <__ieee754_pow+0x6e0>
 800982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982c:	3301      	adds	r3, #1
 800982e:	9309      	str	r3, [sp, #36]	; 0x24
 8009830:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009834:	2400      	movs	r4, #0
 8009836:	00e3      	lsls	r3, r4, #3
 8009838:	930b      	str	r3, [sp, #44]	; 0x2c
 800983a:	4bc9      	ldr	r3, [pc, #804]	; (8009b60 <__ieee754_pow+0x750>)
 800983c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009840:	ed93 7b00 	vldr	d7, [r3]
 8009844:	4629      	mov	r1, r5
 8009846:	ec53 2b17 	vmov	r2, r3, d7
 800984a:	eeb0 8a47 	vmov.f32	s16, s14
 800984e:	eef0 8a67 	vmov.f32	s17, s15
 8009852:	4682      	mov	sl, r0
 8009854:	f7f6 fcc4 	bl	80001e0 <__aeabi_dsub>
 8009858:	4652      	mov	r2, sl
 800985a:	4606      	mov	r6, r0
 800985c:	460f      	mov	r7, r1
 800985e:	462b      	mov	r3, r5
 8009860:	ec51 0b18 	vmov	r0, r1, d8
 8009864:	f7f6 fcbe 	bl	80001e4 <__adddf3>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	2000      	movs	r0, #0
 800986e:	49bd      	ldr	r1, [pc, #756]	; (8009b64 <__ieee754_pow+0x754>)
 8009870:	f7f6 ff98 	bl	80007a4 <__aeabi_ddiv>
 8009874:	ec41 0b19 	vmov	d9, r0, r1
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f6 fe66 	bl	8000550 <__aeabi_dmul>
 8009884:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800988c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009890:	2300      	movs	r3, #0
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009898:	46ab      	mov	fp, r5
 800989a:	106d      	asrs	r5, r5, #1
 800989c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80098a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80098a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80098a8:	2200      	movs	r2, #0
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	4614      	mov	r4, r2
 80098b0:	461d      	mov	r5, r3
 80098b2:	f7f6 fe4d 	bl	8000550 <__aeabi_dmul>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4630      	mov	r0, r6
 80098bc:	4639      	mov	r1, r7
 80098be:	f7f6 fc8f 	bl	80001e0 <__aeabi_dsub>
 80098c2:	ec53 2b18 	vmov	r2, r3, d8
 80098c6:	4606      	mov	r6, r0
 80098c8:	460f      	mov	r7, r1
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 fc87 	bl	80001e0 <__aeabi_dsub>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4650      	mov	r0, sl
 80098d8:	4659      	mov	r1, fp
 80098da:	f7f6 fc81 	bl	80001e0 <__aeabi_dsub>
 80098de:	4642      	mov	r2, r8
 80098e0:	464b      	mov	r3, r9
 80098e2:	f7f6 fe35 	bl	8000550 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fc77 	bl	80001e0 <__aeabi_dsub>
 80098f2:	ec53 2b19 	vmov	r2, r3, d9
 80098f6:	f7f6 fe2b 	bl	8000550 <__aeabi_dmul>
 80098fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098fe:	ec41 0b18 	vmov	d8, r0, r1
 8009902:	4610      	mov	r0, r2
 8009904:	4619      	mov	r1, r3
 8009906:	f7f6 fe23 	bl	8000550 <__aeabi_dmul>
 800990a:	a37d      	add	r3, pc, #500	; (adr r3, 8009b00 <__ieee754_pow+0x6f0>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	f7f6 fe1c 	bl	8000550 <__aeabi_dmul>
 8009918:	a37b      	add	r3, pc, #492	; (adr r3, 8009b08 <__ieee754_pow+0x6f8>)
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f7f6 fc61 	bl	80001e4 <__adddf3>
 8009922:	4622      	mov	r2, r4
 8009924:	462b      	mov	r3, r5
 8009926:	f7f6 fe13 	bl	8000550 <__aeabi_dmul>
 800992a:	a379      	add	r3, pc, #484	; (adr r3, 8009b10 <__ieee754_pow+0x700>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f6 fc58 	bl	80001e4 <__adddf3>
 8009934:	4622      	mov	r2, r4
 8009936:	462b      	mov	r3, r5
 8009938:	f7f6 fe0a 	bl	8000550 <__aeabi_dmul>
 800993c:	a376      	add	r3, pc, #472	; (adr r3, 8009b18 <__ieee754_pow+0x708>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fc4f 	bl	80001e4 <__adddf3>
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	f7f6 fe01 	bl	8000550 <__aeabi_dmul>
 800994e:	a374      	add	r3, pc, #464	; (adr r3, 8009b20 <__ieee754_pow+0x710>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f6 fc46 	bl	80001e4 <__adddf3>
 8009958:	4622      	mov	r2, r4
 800995a:	462b      	mov	r3, r5
 800995c:	f7f6 fdf8 	bl	8000550 <__aeabi_dmul>
 8009960:	a371      	add	r3, pc, #452	; (adr r3, 8009b28 <__ieee754_pow+0x718>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fc3d 	bl	80001e4 <__adddf3>
 800996a:	4622      	mov	r2, r4
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	462b      	mov	r3, r5
 8009972:	4620      	mov	r0, r4
 8009974:	4629      	mov	r1, r5
 8009976:	f7f6 fdeb 	bl	8000550 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fde5 	bl	8000550 <__aeabi_dmul>
 8009986:	4642      	mov	r2, r8
 8009988:	4604      	mov	r4, r0
 800998a:	460d      	mov	r5, r1
 800998c:	464b      	mov	r3, r9
 800998e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009992:	f7f6 fc27 	bl	80001e4 <__adddf3>
 8009996:	ec53 2b18 	vmov	r2, r3, d8
 800999a:	f7f6 fdd9 	bl	8000550 <__aeabi_dmul>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fc1f 	bl	80001e4 <__adddf3>
 80099a6:	4642      	mov	r2, r8
 80099a8:	4682      	mov	sl, r0
 80099aa:	468b      	mov	fp, r1
 80099ac:	464b      	mov	r3, r9
 80099ae:	4640      	mov	r0, r8
 80099b0:	4649      	mov	r1, r9
 80099b2:	f7f6 fdcd 	bl	8000550 <__aeabi_dmul>
 80099b6:	4b6c      	ldr	r3, [pc, #432]	; (8009b68 <__ieee754_pow+0x758>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	f7f6 fc11 	bl	80001e4 <__adddf3>
 80099c2:	4652      	mov	r2, sl
 80099c4:	465b      	mov	r3, fp
 80099c6:	f7f6 fc0d 	bl	80001e4 <__adddf3>
 80099ca:	9c04      	ldr	r4, [sp, #16]
 80099cc:	460d      	mov	r5, r1
 80099ce:	4622      	mov	r2, r4
 80099d0:	460b      	mov	r3, r1
 80099d2:	4640      	mov	r0, r8
 80099d4:	4649      	mov	r1, r9
 80099d6:	f7f6 fdbb 	bl	8000550 <__aeabi_dmul>
 80099da:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <__ieee754_pow+0x758>)
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	2200      	movs	r2, #0
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f6 fbfb 	bl	80001e0 <__aeabi_dsub>
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	f7f6 fbf7 	bl	80001e0 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4650      	mov	r0, sl
 80099f8:	4659      	mov	r1, fp
 80099fa:	f7f6 fbf1 	bl	80001e0 <__aeabi_dsub>
 80099fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a02:	f7f6 fda5 	bl	8000550 <__aeabi_dmul>
 8009a06:	4622      	mov	r2, r4
 8009a08:	4606      	mov	r6, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	ec51 0b18 	vmov	r0, r1, d8
 8009a12:	f7f6 fd9d 	bl	8000550 <__aeabi_dmul>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f6 fbe1 	bl	80001e4 <__adddf3>
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f6 fbd9 	bl	80001e4 <__adddf3>
 8009a32:	9c04      	ldr	r4, [sp, #16]
 8009a34:	a33e      	add	r3, pc, #248	; (adr r3, 8009b30 <__ieee754_pow+0x720>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	f7f6 fd87 	bl	8000550 <__aeabi_dmul>
 8009a42:	4642      	mov	r2, r8
 8009a44:	ec41 0b18 	vmov	d8, r0, r1
 8009a48:	464b      	mov	r3, r9
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7f6 fbc7 	bl	80001e0 <__aeabi_dsub>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f6 fbc1 	bl	80001e0 <__aeabi_dsub>
 8009a5e:	a336      	add	r3, pc, #216	; (adr r3, 8009b38 <__ieee754_pow+0x728>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fd74 	bl	8000550 <__aeabi_dmul>
 8009a68:	a335      	add	r3, pc, #212	; (adr r3, 8009b40 <__ieee754_pow+0x730>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 fd6b 	bl	8000550 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fbaf 	bl	80001e4 <__adddf3>
 8009a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a88:	4b38      	ldr	r3, [pc, #224]	; (8009b6c <__ieee754_pow+0x75c>)
 8009a8a:	4413      	add	r3, r2
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fba8 	bl	80001e4 <__adddf3>
 8009a94:	4682      	mov	sl, r0
 8009a96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a98:	468b      	mov	fp, r1
 8009a9a:	f7f6 fcef 	bl	800047c <__aeabi_i2d>
 8009a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aa0:	4b33      	ldr	r3, [pc, #204]	; (8009b70 <__ieee754_pow+0x760>)
 8009aa2:	4413      	add	r3, r2
 8009aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	460f      	mov	r7, r1
 8009aac:	4652      	mov	r2, sl
 8009aae:	465b      	mov	r3, fp
 8009ab0:	ec51 0b18 	vmov	r0, r1, d8
 8009ab4:	f7f6 fb96 	bl	80001e4 <__adddf3>
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	f7f6 fb92 	bl	80001e4 <__adddf3>
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	f7f6 fb8e 	bl	80001e4 <__adddf3>
 8009ac8:	9c04      	ldr	r4, [sp, #16]
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	4620      	mov	r0, r4
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	f7f6 fb85 	bl	80001e0 <__aeabi_dsub>
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	464b      	mov	r3, r9
 8009ada:	f7f6 fb81 	bl	80001e0 <__aeabi_dsub>
 8009ade:	ec53 2b18 	vmov	r2, r3, d8
 8009ae2:	f7f6 fb7d 	bl	80001e0 <__aeabi_dsub>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4650      	mov	r0, sl
 8009aec:	4659      	mov	r1, fp
 8009aee:	e606      	b.n	80096fe <__ieee754_pow+0x2ee>
 8009af0:	2401      	movs	r4, #1
 8009af2:	e6a0      	b.n	8009836 <__ieee754_pow+0x426>
 8009af4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009b48 <__ieee754_pow+0x738>
 8009af8:	e60d      	b.n	8009716 <__ieee754_pow+0x306>
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w
 8009b00:	4a454eef 	.word	0x4a454eef
 8009b04:	3fca7e28 	.word	0x3fca7e28
 8009b08:	93c9db65 	.word	0x93c9db65
 8009b0c:	3fcd864a 	.word	0x3fcd864a
 8009b10:	a91d4101 	.word	0xa91d4101
 8009b14:	3fd17460 	.word	0x3fd17460
 8009b18:	518f264d 	.word	0x518f264d
 8009b1c:	3fd55555 	.word	0x3fd55555
 8009b20:	db6fabff 	.word	0xdb6fabff
 8009b24:	3fdb6db6 	.word	0x3fdb6db6
 8009b28:	33333303 	.word	0x33333303
 8009b2c:	3fe33333 	.word	0x3fe33333
 8009b30:	e0000000 	.word	0xe0000000
 8009b34:	3feec709 	.word	0x3feec709
 8009b38:	dc3a03fd 	.word	0xdc3a03fd
 8009b3c:	3feec709 	.word	0x3feec709
 8009b40:	145b01f5 	.word	0x145b01f5
 8009b44:	be3e2fe0 	.word	0xbe3e2fe0
 8009b48:	00000000 	.word	0x00000000
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	7ff00000 	.word	0x7ff00000
 8009b54:	43400000 	.word	0x43400000
 8009b58:	0003988e 	.word	0x0003988e
 8009b5c:	000bb679 	.word	0x000bb679
 8009b60:	0800a260 	.word	0x0800a260
 8009b64:	3ff00000 	.word	0x3ff00000
 8009b68:	40080000 	.word	0x40080000
 8009b6c:	0800a280 	.word	0x0800a280
 8009b70:	0800a270 	.word	0x0800a270
 8009b74:	a3b5      	add	r3, pc, #724	; (adr r3, 8009e4c <__ieee754_pow+0xa3c>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	f7f6 fb31 	bl	80001e4 <__adddf3>
 8009b82:	4622      	mov	r2, r4
 8009b84:	ec41 0b1a 	vmov	d10, r0, r1
 8009b88:	462b      	mov	r3, r5
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	f7f6 fb27 	bl	80001e0 <__aeabi_dsub>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	ec51 0b1a 	vmov	r0, r1, d10
 8009b9a:	f7f6 ff69 	bl	8000a70 <__aeabi_dcmpgt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f47f adf8 	bne.w	8009794 <__ieee754_pow+0x384>
 8009ba4:	4aa4      	ldr	r2, [pc, #656]	; (8009e38 <__ieee754_pow+0xa28>)
 8009ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f340 810b 	ble.w	8009dc6 <__ieee754_pow+0x9b6>
 8009bb0:	151b      	asrs	r3, r3, #20
 8009bb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009bb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009bba:	fa4a f303 	asr.w	r3, sl, r3
 8009bbe:	445b      	add	r3, fp
 8009bc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009bc4:	4e9d      	ldr	r6, [pc, #628]	; (8009e3c <__ieee754_pow+0xa2c>)
 8009bc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009bca:	4116      	asrs	r6, r2
 8009bcc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	ea23 0106 	bic.w	r1, r3, r6
 8009bd6:	f1c2 0214 	rsb	r2, r2, #20
 8009bda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009bde:	fa4a fa02 	asr.w	sl, sl, r2
 8009be2:	f1bb 0f00 	cmp.w	fp, #0
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	bfb8      	it	lt
 8009bf0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009bf4:	f7f6 faf4 	bl	80001e0 <__aeabi_dsub>
 8009bf8:	ec41 0b19 	vmov	d9, r0, r1
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	ec51 0b19 	vmov	r0, r1, d9
 8009c04:	f7f6 faee 	bl	80001e4 <__adddf3>
 8009c08:	2400      	movs	r4, #0
 8009c0a:	a379      	add	r3, pc, #484	; (adr r3, 8009df0 <__ieee754_pow+0x9e0>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	4620      	mov	r0, r4
 8009c12:	460d      	mov	r5, r1
 8009c14:	f7f6 fc9c 	bl	8000550 <__aeabi_dmul>
 8009c18:	ec53 2b19 	vmov	r2, r3, d9
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	460f      	mov	r7, r1
 8009c20:	4620      	mov	r0, r4
 8009c22:	4629      	mov	r1, r5
 8009c24:	f7f6 fadc 	bl	80001e0 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fad6 	bl	80001e0 <__aeabi_dsub>
 8009c34:	a370      	add	r3, pc, #448	; (adr r3, 8009df8 <__ieee754_pow+0x9e8>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f6 fc89 	bl	8000550 <__aeabi_dmul>
 8009c3e:	a370      	add	r3, pc, #448	; (adr r3, 8009e00 <__ieee754_pow+0x9f0>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4680      	mov	r8, r0
 8009c46:	4689      	mov	r9, r1
 8009c48:	4620      	mov	r0, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f7f6 fc80 	bl	8000550 <__aeabi_dmul>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4640      	mov	r0, r8
 8009c56:	4649      	mov	r1, r9
 8009c58:	f7f6 fac4 	bl	80001e4 <__adddf3>
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 fabc 	bl	80001e4 <__adddf3>
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4680      	mov	r8, r0
 8009c72:	4689      	mov	r9, r1
 8009c74:	f7f6 fab4 	bl	80001e0 <__aeabi_dsub>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 faae 	bl	80001e0 <__aeabi_dsub>
 8009c84:	4642      	mov	r2, r8
 8009c86:	4606      	mov	r6, r0
 8009c88:	460f      	mov	r7, r1
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f7f6 fc5e 	bl	8000550 <__aeabi_dmul>
 8009c94:	a35c      	add	r3, pc, #368	; (adr r3, 8009e08 <__ieee754_pow+0x9f8>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	f7f6 fc57 	bl	8000550 <__aeabi_dmul>
 8009ca2:	a35b      	add	r3, pc, #364	; (adr r3, 8009e10 <__ieee754_pow+0xa00>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fa9a 	bl	80001e0 <__aeabi_dsub>
 8009cac:	4622      	mov	r2, r4
 8009cae:	462b      	mov	r3, r5
 8009cb0:	f7f6 fc4e 	bl	8000550 <__aeabi_dmul>
 8009cb4:	a358      	add	r3, pc, #352	; (adr r3, 8009e18 <__ieee754_pow+0xa08>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fa93 	bl	80001e4 <__adddf3>
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	f7f6 fc45 	bl	8000550 <__aeabi_dmul>
 8009cc6:	a356      	add	r3, pc, #344	; (adr r3, 8009e20 <__ieee754_pow+0xa10>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f7f6 fa88 	bl	80001e0 <__aeabi_dsub>
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	f7f6 fc3c 	bl	8000550 <__aeabi_dmul>
 8009cd8:	a353      	add	r3, pc, #332	; (adr r3, 8009e28 <__ieee754_pow+0xa18>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f7f6 fa81 	bl	80001e4 <__adddf3>
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	462b      	mov	r3, r5
 8009ce6:	f7f6 fc33 	bl	8000550 <__aeabi_dmul>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	f7f6 fa75 	bl	80001e0 <__aeabi_dsub>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4640      	mov	r0, r8
 8009d00:	4649      	mov	r1, r9
 8009d02:	f7f6 fc25 	bl	8000550 <__aeabi_dmul>
 8009d06:	2200      	movs	r2, #0
 8009d08:	ec41 0b19 	vmov	d9, r0, r1
 8009d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d10:	4620      	mov	r0, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	f7f6 fa64 	bl	80001e0 <__aeabi_dsub>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	ec51 0b19 	vmov	r0, r1, d9
 8009d20:	f7f6 fd40 	bl	80007a4 <__aeabi_ddiv>
 8009d24:	4632      	mov	r2, r6
 8009d26:	4604      	mov	r4, r0
 8009d28:	460d      	mov	r5, r1
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fc0e 	bl	8000550 <__aeabi_dmul>
 8009d34:	4632      	mov	r2, r6
 8009d36:	463b      	mov	r3, r7
 8009d38:	f7f6 fa54 	bl	80001e4 <__adddf3>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 fa4c 	bl	80001e0 <__aeabi_dsub>
 8009d48:	4642      	mov	r2, r8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f7f6 fa48 	bl	80001e0 <__aeabi_dsub>
 8009d50:	460b      	mov	r3, r1
 8009d52:	4602      	mov	r2, r0
 8009d54:	493a      	ldr	r1, [pc, #232]	; (8009e40 <__ieee754_pow+0xa30>)
 8009d56:	2000      	movs	r0, #0
 8009d58:	f7f6 fa42 	bl	80001e0 <__aeabi_dsub>
 8009d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8009d60:	9b01      	ldr	r3, [sp, #4]
 8009d62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6a:	da2f      	bge.n	8009dcc <__ieee754_pow+0x9bc>
 8009d6c:	4650      	mov	r0, sl
 8009d6e:	ed9d 0b00 	vldr	d0, [sp]
 8009d72:	f000 f9cd 	bl	800a110 <scalbn>
 8009d76:	ec51 0b10 	vmov	r0, r1, d0
 8009d7a:	ec53 2b18 	vmov	r2, r3, d8
 8009d7e:	f7ff bbe0 	b.w	8009542 <__ieee754_pow+0x132>
 8009d82:	4b30      	ldr	r3, [pc, #192]	; (8009e44 <__ieee754_pow+0xa34>)
 8009d84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009d88:	429e      	cmp	r6, r3
 8009d8a:	f77f af0b 	ble.w	8009ba4 <__ieee754_pow+0x794>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__ieee754_pow+0xa38>)
 8009d90:	440b      	add	r3, r1
 8009d92:	4303      	orrs	r3, r0
 8009d94:	d00b      	beq.n	8009dae <__ieee754_pow+0x99e>
 8009d96:	a326      	add	r3, pc, #152	; (adr r3, 8009e30 <__ieee754_pow+0xa20>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	ec51 0b18 	vmov	r0, r1, d8
 8009da0:	f7f6 fbd6 	bl	8000550 <__aeabi_dmul>
 8009da4:	a322      	add	r3, pc, #136	; (adr r3, 8009e30 <__ieee754_pow+0xa20>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7ff bbca 	b.w	8009542 <__ieee754_pow+0x132>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 fa15 	bl	80001e0 <__aeabi_dsub>
 8009db6:	4642      	mov	r2, r8
 8009db8:	464b      	mov	r3, r9
 8009dba:	f7f6 fe4f 	bl	8000a5c <__aeabi_dcmpge>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f aef0 	beq.w	8009ba4 <__ieee754_pow+0x794>
 8009dc4:	e7e7      	b.n	8009d96 <__ieee754_pow+0x986>
 8009dc6:	f04f 0a00 	mov.w	sl, #0
 8009dca:	e717      	b.n	8009bfc <__ieee754_pow+0x7ec>
 8009dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	e7d2      	b.n	8009d7a <__ieee754_pow+0x96a>
 8009dd4:	491a      	ldr	r1, [pc, #104]	; (8009e40 <__ieee754_pow+0xa30>)
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f7ff bb9e 	b.w	8009518 <__ieee754_pow+0x108>
 8009ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de0:	f7ff bb9a 	b.w	8009518 <__ieee754_pow+0x108>
 8009de4:	9000      	str	r0, [sp, #0]
 8009de6:	f7ff bb76 	b.w	80094d6 <__ieee754_pow+0xc6>
 8009dea:	2100      	movs	r1, #0
 8009dec:	f7ff bb60 	b.w	80094b0 <__ieee754_pow+0xa0>
 8009df0:	00000000 	.word	0x00000000
 8009df4:	3fe62e43 	.word	0x3fe62e43
 8009df8:	fefa39ef 	.word	0xfefa39ef
 8009dfc:	3fe62e42 	.word	0x3fe62e42
 8009e00:	0ca86c39 	.word	0x0ca86c39
 8009e04:	be205c61 	.word	0xbe205c61
 8009e08:	72bea4d0 	.word	0x72bea4d0
 8009e0c:	3e663769 	.word	0x3e663769
 8009e10:	c5d26bf1 	.word	0xc5d26bf1
 8009e14:	3ebbbd41 	.word	0x3ebbbd41
 8009e18:	af25de2c 	.word	0xaf25de2c
 8009e1c:	3f11566a 	.word	0x3f11566a
 8009e20:	16bebd93 	.word	0x16bebd93
 8009e24:	3f66c16c 	.word	0x3f66c16c
 8009e28:	5555553e 	.word	0x5555553e
 8009e2c:	3fc55555 	.word	0x3fc55555
 8009e30:	c2f8f359 	.word	0xc2f8f359
 8009e34:	01a56e1f 	.word	0x01a56e1f
 8009e38:	3fe00000 	.word	0x3fe00000
 8009e3c:	000fffff 	.word	0x000fffff
 8009e40:	3ff00000 	.word	0x3ff00000
 8009e44:	4090cbff 	.word	0x4090cbff
 8009e48:	3f6f3400 	.word	0x3f6f3400
 8009e4c:	652b82fe 	.word	0x652b82fe
 8009e50:	3c971547 	.word	0x3c971547

08009e54 <__ieee754_sqrt>:
 8009e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	ec55 4b10 	vmov	r4, r5, d0
 8009e5c:	4e56      	ldr	r6, [pc, #344]	; (8009fb8 <__ieee754_sqrt+0x164>)
 8009e5e:	43ae      	bics	r6, r5
 8009e60:	ee10 0a10 	vmov	r0, s0
 8009e64:	ee10 3a10 	vmov	r3, s0
 8009e68:	4629      	mov	r1, r5
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	d110      	bne.n	8009e90 <__ieee754_sqrt+0x3c>
 8009e6e:	ee10 2a10 	vmov	r2, s0
 8009e72:	462b      	mov	r3, r5
 8009e74:	f7f6 fb6c 	bl	8000550 <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 f9b0 	bl	80001e4 <__adddf3>
 8009e84:	4604      	mov	r4, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	ec45 4b10 	vmov	d0, r4, r5
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	dc10      	bgt.n	8009eb6 <__ieee754_sqrt+0x62>
 8009e94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e98:	4330      	orrs	r0, r6
 8009e9a:	d0f5      	beq.n	8009e88 <__ieee754_sqrt+0x34>
 8009e9c:	b15d      	cbz	r5, 8009eb6 <__ieee754_sqrt+0x62>
 8009e9e:	ee10 2a10 	vmov	r2, s0
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	ee10 0a10 	vmov	r0, s0
 8009ea8:	f7f6 f99a 	bl	80001e0 <__aeabi_dsub>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	f7f6 fc78 	bl	80007a4 <__aeabi_ddiv>
 8009eb4:	e7e6      	b.n	8009e84 <__ieee754_sqrt+0x30>
 8009eb6:	1509      	asrs	r1, r1, #20
 8009eb8:	d076      	beq.n	8009fa8 <__ieee754_sqrt+0x154>
 8009eba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009ebe:	07ce      	lsls	r6, r1, #31
 8009ec0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009ec4:	bf5e      	ittt	pl
 8009ec6:	0fda      	lsrpl	r2, r3, #31
 8009ec8:	005b      	lslpl	r3, r3, #1
 8009eca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009ece:	0fda      	lsrs	r2, r3, #31
 8009ed0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009ed4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009ed8:	2000      	movs	r0, #0
 8009eda:	106d      	asrs	r5, r5, #1
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	f04f 0e16 	mov.w	lr, #22
 8009ee2:	4684      	mov	ip, r0
 8009ee4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ee8:	eb0c 0401 	add.w	r4, ip, r1
 8009eec:	4294      	cmp	r4, r2
 8009eee:	bfde      	ittt	le
 8009ef0:	1b12      	suble	r2, r2, r4
 8009ef2:	eb04 0c01 	addle.w	ip, r4, r1
 8009ef6:	1840      	addle	r0, r0, r1
 8009ef8:	0052      	lsls	r2, r2, #1
 8009efa:	f1be 0e01 	subs.w	lr, lr, #1
 8009efe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009f02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f0a:	d1ed      	bne.n	8009ee8 <__ieee754_sqrt+0x94>
 8009f0c:	4671      	mov	r1, lr
 8009f0e:	2720      	movs	r7, #32
 8009f10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009f14:	4562      	cmp	r2, ip
 8009f16:	eb04 060e 	add.w	r6, r4, lr
 8009f1a:	dc02      	bgt.n	8009f22 <__ieee754_sqrt+0xce>
 8009f1c:	d113      	bne.n	8009f46 <__ieee754_sqrt+0xf2>
 8009f1e:	429e      	cmp	r6, r3
 8009f20:	d811      	bhi.n	8009f46 <__ieee754_sqrt+0xf2>
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	eb06 0e04 	add.w	lr, r6, r4
 8009f28:	da43      	bge.n	8009fb2 <__ieee754_sqrt+0x15e>
 8009f2a:	f1be 0f00 	cmp.w	lr, #0
 8009f2e:	db40      	blt.n	8009fb2 <__ieee754_sqrt+0x15e>
 8009f30:	f10c 0801 	add.w	r8, ip, #1
 8009f34:	eba2 020c 	sub.w	r2, r2, ip
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	bf88      	it	hi
 8009f3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009f40:	1b9b      	subs	r3, r3, r6
 8009f42:	4421      	add	r1, r4
 8009f44:	46c4      	mov	ip, r8
 8009f46:	0052      	lsls	r2, r2, #1
 8009f48:	3f01      	subs	r7, #1
 8009f4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009f4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009f52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f56:	d1dd      	bne.n	8009f14 <__ieee754_sqrt+0xc0>
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	d006      	beq.n	8009f6a <__ieee754_sqrt+0x116>
 8009f5c:	1c4c      	adds	r4, r1, #1
 8009f5e:	bf13      	iteet	ne
 8009f60:	3101      	addne	r1, #1
 8009f62:	3001      	addeq	r0, #1
 8009f64:	4639      	moveq	r1, r7
 8009f66:	f021 0101 	bicne.w	r1, r1, #1
 8009f6a:	1043      	asrs	r3, r0, #1
 8009f6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f70:	0849      	lsrs	r1, r1, #1
 8009f72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f76:	07c2      	lsls	r2, r0, #31
 8009f78:	bf48      	it	mi
 8009f7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009f7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009f82:	460c      	mov	r4, r1
 8009f84:	463d      	mov	r5, r7
 8009f86:	e77f      	b.n	8009e88 <__ieee754_sqrt+0x34>
 8009f88:	0ada      	lsrs	r2, r3, #11
 8009f8a:	3815      	subs	r0, #21
 8009f8c:	055b      	lsls	r3, r3, #21
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d0fa      	beq.n	8009f88 <__ieee754_sqrt+0x134>
 8009f92:	02d7      	lsls	r7, r2, #11
 8009f94:	d50a      	bpl.n	8009fac <__ieee754_sqrt+0x158>
 8009f96:	f1c1 0420 	rsb	r4, r1, #32
 8009f9a:	fa23 f404 	lsr.w	r4, r3, r4
 8009f9e:	1e4d      	subs	r5, r1, #1
 8009fa0:	408b      	lsls	r3, r1
 8009fa2:	4322      	orrs	r2, r4
 8009fa4:	1b41      	subs	r1, r0, r5
 8009fa6:	e788      	b.n	8009eba <__ieee754_sqrt+0x66>
 8009fa8:	4608      	mov	r0, r1
 8009faa:	e7f0      	b.n	8009f8e <__ieee754_sqrt+0x13a>
 8009fac:	0052      	lsls	r2, r2, #1
 8009fae:	3101      	adds	r1, #1
 8009fb0:	e7ef      	b.n	8009f92 <__ieee754_sqrt+0x13e>
 8009fb2:	46e0      	mov	r8, ip
 8009fb4:	e7be      	b.n	8009f34 <__ieee754_sqrt+0xe0>
 8009fb6:	bf00      	nop
 8009fb8:	7ff00000 	.word	0x7ff00000

08009fbc <fabs>:
 8009fbc:	ec51 0b10 	vmov	r0, r1, d0
 8009fc0:	ee10 2a10 	vmov	r2, s0
 8009fc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fc8:	ec43 2b10 	vmov	d0, r2, r3
 8009fcc:	4770      	bx	lr

08009fce <finite>:
 8009fce:	b082      	sub	sp, #8
 8009fd0:	ed8d 0b00 	vstr	d0, [sp]
 8009fd4:	9801      	ldr	r0, [sp, #4]
 8009fd6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009fda:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009fde:	0fc0      	lsrs	r0, r0, #31
 8009fe0:	b002      	add	sp, #8
 8009fe2:	4770      	bx	lr
 8009fe4:	0000      	movs	r0, r0
	...

08009fe8 <nan>:
 8009fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ff0 <nan+0x8>
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	7ff80000 	.word	0x7ff80000

08009ff8 <rint>:
 8009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffa:	ec51 0b10 	vmov	r0, r1, d0
 8009ffe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a002:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a006:	2e13      	cmp	r6, #19
 800a008:	ee10 4a10 	vmov	r4, s0
 800a00c:	460b      	mov	r3, r1
 800a00e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a012:	dc58      	bgt.n	800a0c6 <rint+0xce>
 800a014:	2e00      	cmp	r6, #0
 800a016:	da2b      	bge.n	800a070 <rint+0x78>
 800a018:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a01c:	4302      	orrs	r2, r0
 800a01e:	d023      	beq.n	800a068 <rint+0x70>
 800a020:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a024:	4302      	orrs	r2, r0
 800a026:	4254      	negs	r4, r2
 800a028:	4314      	orrs	r4, r2
 800a02a:	0c4b      	lsrs	r3, r1, #17
 800a02c:	0b24      	lsrs	r4, r4, #12
 800a02e:	045b      	lsls	r3, r3, #17
 800a030:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a034:	ea44 0103 	orr.w	r1, r4, r3
 800a038:	4b32      	ldr	r3, [pc, #200]	; (800a104 <rint+0x10c>)
 800a03a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a03e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 f8cb 	bl	80001e4 <__adddf3>
 800a04e:	e9cd 0100 	strd	r0, r1, [sp]
 800a052:	463b      	mov	r3, r7
 800a054:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a058:	4632      	mov	r2, r6
 800a05a:	f7f6 f8c1 	bl	80001e0 <__aeabi_dsub>
 800a05e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a062:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a066:	4639      	mov	r1, r7
 800a068:	ec41 0b10 	vmov	d0, r0, r1
 800a06c:	b003      	add	sp, #12
 800a06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a070:	4a25      	ldr	r2, [pc, #148]	; (800a108 <rint+0x110>)
 800a072:	4132      	asrs	r2, r6
 800a074:	ea01 0702 	and.w	r7, r1, r2
 800a078:	4307      	orrs	r7, r0
 800a07a:	d0f5      	beq.n	800a068 <rint+0x70>
 800a07c:	0851      	lsrs	r1, r2, #1
 800a07e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a082:	4314      	orrs	r4, r2
 800a084:	d00c      	beq.n	800a0a0 <rint+0xa8>
 800a086:	ea23 0201 	bic.w	r2, r3, r1
 800a08a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a08e:	2e13      	cmp	r6, #19
 800a090:	fa43 f606 	asr.w	r6, r3, r6
 800a094:	bf0c      	ite	eq
 800a096:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a09a:	2400      	movne	r4, #0
 800a09c:	ea42 0306 	orr.w	r3, r2, r6
 800a0a0:	4918      	ldr	r1, [pc, #96]	; (800a104 <rint+0x10c>)
 800a0a2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f7f6 f898 	bl	80001e4 <__adddf3>
 800a0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0bc:	4622      	mov	r2, r4
 800a0be:	462b      	mov	r3, r5
 800a0c0:	f7f6 f88e 	bl	80001e0 <__aeabi_dsub>
 800a0c4:	e7d0      	b.n	800a068 <rint+0x70>
 800a0c6:	2e33      	cmp	r6, #51	; 0x33
 800a0c8:	dd07      	ble.n	800a0da <rint+0xe2>
 800a0ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a0ce:	d1cb      	bne.n	800a068 <rint+0x70>
 800a0d0:	ee10 2a10 	vmov	r2, s0
 800a0d4:	f7f6 f886 	bl	80001e4 <__adddf3>
 800a0d8:	e7c6      	b.n	800a068 <rint+0x70>
 800a0da:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a0de:	f04f 36ff 	mov.w	r6, #4294967295
 800a0e2:	40d6      	lsrs	r6, r2
 800a0e4:	4230      	tst	r0, r6
 800a0e6:	d0bf      	beq.n	800a068 <rint+0x70>
 800a0e8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a0ec:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a0f0:	bf1f      	itttt	ne
 800a0f2:	ea24 0101 	bicne.w	r1, r4, r1
 800a0f6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a0fa:	fa44 f202 	asrne.w	r2, r4, r2
 800a0fe:	ea41 0402 	orrne.w	r4, r1, r2
 800a102:	e7cd      	b.n	800a0a0 <rint+0xa8>
 800a104:	0800a290 	.word	0x0800a290
 800a108:	000fffff 	.word	0x000fffff
 800a10c:	00000000 	.word	0x00000000

0800a110 <scalbn>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	ec55 4b10 	vmov	r4, r5, d0
 800a116:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a11a:	4606      	mov	r6, r0
 800a11c:	462b      	mov	r3, r5
 800a11e:	b99a      	cbnz	r2, 800a148 <scalbn+0x38>
 800a120:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a124:	4323      	orrs	r3, r4
 800a126:	d036      	beq.n	800a196 <scalbn+0x86>
 800a128:	4b39      	ldr	r3, [pc, #228]	; (800a210 <scalbn+0x100>)
 800a12a:	4629      	mov	r1, r5
 800a12c:	ee10 0a10 	vmov	r0, s0
 800a130:	2200      	movs	r2, #0
 800a132:	f7f6 fa0d 	bl	8000550 <__aeabi_dmul>
 800a136:	4b37      	ldr	r3, [pc, #220]	; (800a214 <scalbn+0x104>)
 800a138:	429e      	cmp	r6, r3
 800a13a:	4604      	mov	r4, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	da10      	bge.n	800a162 <scalbn+0x52>
 800a140:	a32b      	add	r3, pc, #172	; (adr r3, 800a1f0 <scalbn+0xe0>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	e03a      	b.n	800a1be <scalbn+0xae>
 800a148:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a14c:	428a      	cmp	r2, r1
 800a14e:	d10c      	bne.n	800a16a <scalbn+0x5a>
 800a150:	ee10 2a10 	vmov	r2, s0
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f844 	bl	80001e4 <__adddf3>
 800a15c:	4604      	mov	r4, r0
 800a15e:	460d      	mov	r5, r1
 800a160:	e019      	b.n	800a196 <scalbn+0x86>
 800a162:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a166:	460b      	mov	r3, r1
 800a168:	3a36      	subs	r2, #54	; 0x36
 800a16a:	4432      	add	r2, r6
 800a16c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a170:	428a      	cmp	r2, r1
 800a172:	dd08      	ble.n	800a186 <scalbn+0x76>
 800a174:	2d00      	cmp	r5, #0
 800a176:	a120      	add	r1, pc, #128	; (adr r1, 800a1f8 <scalbn+0xe8>)
 800a178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17c:	da1c      	bge.n	800a1b8 <scalbn+0xa8>
 800a17e:	a120      	add	r1, pc, #128	; (adr r1, 800a200 <scalbn+0xf0>)
 800a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a184:	e018      	b.n	800a1b8 <scalbn+0xa8>
 800a186:	2a00      	cmp	r2, #0
 800a188:	dd08      	ble.n	800a19c <scalbn+0x8c>
 800a18a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a18e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a196:	ec45 4b10 	vmov	d0, r4, r5
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a1a0:	da19      	bge.n	800a1d6 <scalbn+0xc6>
 800a1a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a1a6:	429e      	cmp	r6, r3
 800a1a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a1ac:	dd0a      	ble.n	800a1c4 <scalbn+0xb4>
 800a1ae:	a112      	add	r1, pc, #72	; (adr r1, 800a1f8 <scalbn+0xe8>)
 800a1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e2      	bne.n	800a17e <scalbn+0x6e>
 800a1b8:	a30f      	add	r3, pc, #60	; (adr r3, 800a1f8 <scalbn+0xe8>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 f9c7 	bl	8000550 <__aeabi_dmul>
 800a1c2:	e7cb      	b.n	800a15c <scalbn+0x4c>
 800a1c4:	a10a      	add	r1, pc, #40	; (adr r1, 800a1f0 <scalbn+0xe0>)
 800a1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0b8      	beq.n	800a140 <scalbn+0x30>
 800a1ce:	a10e      	add	r1, pc, #56	; (adr r1, 800a208 <scalbn+0xf8>)
 800a1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d4:	e7b4      	b.n	800a140 <scalbn+0x30>
 800a1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1da:	3236      	adds	r2, #54	; 0x36
 800a1dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <scalbn+0x108>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	e7e8      	b.n	800a1be <scalbn+0xae>
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	c2f8f359 	.word	0xc2f8f359
 800a1f4:	01a56e1f 	.word	0x01a56e1f
 800a1f8:	8800759c 	.word	0x8800759c
 800a1fc:	7e37e43c 	.word	0x7e37e43c
 800a200:	8800759c 	.word	0x8800759c
 800a204:	fe37e43c 	.word	0xfe37e43c
 800a208:	c2f8f359 	.word	0xc2f8f359
 800a20c:	81a56e1f 	.word	0x81a56e1f
 800a210:	43500000 	.word	0x43500000
 800a214:	ffff3cb0 	.word	0xffff3cb0
 800a218:	3c900000 	.word	0x3c900000

0800a21c <_init>:
 800a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21e:	bf00      	nop
 800a220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a222:	bc08      	pop	{r3}
 800a224:	469e      	mov	lr, r3
 800a226:	4770      	bx	lr

0800a228 <_fini>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	bf00      	nop
 800a22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22e:	bc08      	pop	{r3}
 800a230:	469e      	mov	lr, r3
 800a232:	4770      	bx	lr
